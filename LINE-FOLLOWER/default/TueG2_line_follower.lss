
TueG2_line_follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000135e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  0000135e  000013f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800168  00800168  000014fa  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000014fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000202  00000000  00000000  0000151a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c8d  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002aa  00000000  00000000  000023a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009b6  00000000  00000000  00002653  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  0000300c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000318  00000000  00000000  000031fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004da  00000000  00000000  00003514  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a4 37       	cpi	r26, 0x74	; 116
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee e5       	ldi	r30, 0x5E	; 94
      78:	f3 e1       	ldi	r31, 0x13	; 19
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 b0 02 	call	0x560	; 0x560 <main>
      8a:	0c 94 ad 09 	jmp	0x135a	; 0x135a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <motion_pin_config>:
#define lcd_port PORTC
#define sbit(reg,bit)    reg |= (1<<bit)
#define cbit(reg,bit)    reg &= ~(1<<bit)
void motion_pin_config (void)
{
 DDRB = DDRB | 0x0F;   //set direction of the PORTB3 to PORTB0 pins as output
      92:	87 b3       	in	r24, 0x17	; 23
      94:	8f 60       	ori	r24, 0x0F	; 15
      96:	87 bb       	out	0x17, r24	; 23
 PORTB = PORTB & 0xF0; // set initial value of the PORTB3 to PORTB0 pins to logic 0
      98:	88 b3       	in	r24, 0x18	; 24
      9a:	80 7f       	andi	r24, 0xF0	; 240
      9c:	88 bb       	out	0x18, r24	; 24
 DDRD = DDRD | 0x30;   //Setting PD4 and PD5 pins as output for PWM generation
      9e:	81 b3       	in	r24, 0x11	; 17
      a0:	80 63       	ori	r24, 0x30	; 48
      a2:	81 bb       	out	0x11, r24	; 17
 PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
      a4:	82 b3       	in	r24, 0x12	; 18
      a6:	80 63       	ori	r24, 0x30	; 48
      a8:	82 bb       	out	0x12, r24	; 18
}
      aa:	08 95       	ret

000000ac <min>:
		}
}

unsigned char min(int a, int b)
{
	if( a> b)
      ac:	68 17       	cp	r22, r24
      ae:	79 07       	cpc	r23, r25
      b0:	0c f4       	brge	.+2      	; 0xb4 <min+0x8>
	{
		return (unsigned char)b;
      b2:	86 2f       	mov	r24, r22
	}

	return (unsigned char)a;
}
      b4:	08 95       	ret

000000b6 <abs>:
{
	if( a > 0)
		return a;
	else 
		return -a;
}
      b6:	9c 01       	movw	r18, r24
      b8:	97 ff       	sbrs	r25, 7
      ba:	03 c0       	rjmp	.+6      	; 0xc2 <abs+0xc>
      bc:	30 95       	com	r19
      be:	21 95       	neg	r18
      c0:	3f 4f       	sbci	r19, 0xFF	; 255
      c2:	c9 01       	movw	r24, r18
      c4:	08 95       	ret

000000c6 <port_init>:
#define lcd_port PORTC
#define sbit(reg,bit)    reg |= (1<<bit)
#define cbit(reg,bit)    reg &= ~(1<<bit)
void motion_pin_config (void)
{
 DDRB = DDRB | 0x0F;   //set direction of the PORTB3 to PORTB0 pins as output
      c6:	87 b3       	in	r24, 0x17	; 23
      c8:	8f 60       	ori	r24, 0x0F	; 15
      ca:	87 bb       	out	0x17, r24	; 23
 PORTB = PORTB & 0xF0; // set initial value of the PORTB3 to PORTB0 pins to logic 0
      cc:	88 b3       	in	r24, 0x18	; 24
      ce:	80 7f       	andi	r24, 0xF0	; 240
      d0:	88 bb       	out	0x18, r24	; 24
 DDRD = DDRD | 0x30;   //Setting PD4 and PD5 pins as output for PWM generation
      d2:	81 b3       	in	r24, 0x11	; 17
      d4:	80 63       	ori	r24, 0x30	; 48
      d6:	81 bb       	out	0x11, r24	; 17
 PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
      d8:	82 b3       	in	r24, 0x12	; 18
      da:	80 63       	ori	r24, 0x30	; 48
      dc:	82 bb       	out	0x12, r24	; 18

//ADC pin configuration 
void adc_pin_config (void) 
{

 DDRA = 0x00; //set PORTA direction as input 
      de:	1a ba       	out	0x1a, r1	; 26
 PORTA = 0x00; //set PORTA pins floating 
      e0:	1b ba       	out	0x1b, r1	; 27
// timer1_init();
 sei(); //Enables the global interrupts
}
void lcd_port_config (void) 
{ 
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output 
      e2:	84 b3       	in	r24, 0x14	; 20
      e4:	87 6f       	ori	r24, 0xF7	; 247
      e6:	84 bb       	out	0x14, r24	; 20
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7 
      e8:	85 b3       	in	r24, 0x15	; 21
      ea:	80 78       	andi	r24, 0x80	; 128
      ec:	85 bb       	out	0x15, r24	; 21
void port_init()
{
 motion_pin_config();
 adc_pin_config();
 lcd_port_config();
}
      ee:	08 95       	ret

000000f0 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
      f0:	98 b3       	in	r25, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
      f2:	90 7f       	andi	r25, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
      f4:	8f 70       	andi	r24, 0x0F	; 15
      f6:	89 2b       	or	r24, r25
 PORTB = PortBRestore; 			// setting the command to the port
      f8:	88 bb       	out	0x18, r24	; 24
}
      fa:	08 95       	ret

000000fc <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
      fc:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
      fe:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     100:	86 60       	ori	r24, 0x06	; 6
 PORTB = PortBRestore; 			// setting the command to the port
     102:	88 bb       	out	0x18, r24	; 24
}

void forward (void)         //both wheels forward
{
  motion_set(0x06);
}
     104:	08 95       	ret

00000106 <back>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     106:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     108:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     10a:	89 60       	ori	r24, 0x09	; 9
 PORTB = PortBRestore; 			// setting the command to the port
     10c:	88 bb       	out	0x18, r24	; 24
}

void back (void)            //both wheels backward
{
  motion_set(0x09);
}
     10e:	08 95       	ret

00000110 <left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     110:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     112:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     114:	85 60       	ori	r24, 0x05	; 5
 PORTB = PortBRestore; 			// setting the command to the port
     116:	88 bb       	out	0x18, r24	; 24
}

void left (unsigned char v1, unsigned char v2)            //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     118:	08 95       	ret

0000011a <right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     11a:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     11c:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     11e:	8a 60       	ori	r24, 0x0A	; 10
 PORTB = PortBRestore; 			// setting the command to the port
     120:	88 bb       	out	0x18, r24	; 24
}

void right (unsigned char v1, unsigned char v2)           //Left wheel forward, Right wheel backward
{   
  motion_set(0x0A);
}
     122:	08 95       	ret

00000124 <soft_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     124:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     126:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     128:	84 60       	ori	r24, 0x04	; 4
 PORTB = PortBRestore; 			// setting the command to the port
     12a:	88 bb       	out	0x18, r24	; 24
}

void soft_left (unsigned char v1, unsigned char v2)       //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     12c:	08 95       	ret

0000012e <soft_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     12e:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     130:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     132:	82 60       	ori	r24, 0x02	; 2
 PORTB = PortBRestore; 			// setting the command to the port
     134:	88 bb       	out	0x18, r24	; 24
}

void soft_right (unsigned char v1, unsigned char v2)      //Left wheel forward, Right wheel is stationary
{ 
 motion_set(0x02);
}
     136:	08 95       	ret

00000138 <my_velocity>:
 PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
}


void my_velocity(float val,float scale, int offset, float drive)
{
     138:	4f 92       	push	r4
     13a:	5f 92       	push	r5
     13c:	6f 92       	push	r6
     13e:	7f 92       	push	r7
     140:	8f 92       	push	r8
     142:	9f 92       	push	r9
     144:	af 92       	push	r10
     146:	bf 92       	push	r11
     148:	cf 92       	push	r12
     14a:	df 92       	push	r13
     14c:	ef 92       	push	r14
     14e:	ff 92       	push	r15
     150:	0f 93       	push	r16
     152:	1f 93       	push	r17
     154:	df 93       	push	r29
     156:	cf 93       	push	r28
     158:	00 d0       	rcall	.+0      	; 0x15a <my_velocity+0x22>
     15a:	00 d0       	rcall	.+0      	; 0x15c <my_velocity+0x24>
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	69 83       	std	Y+1, r22	; 0x01
     162:	7a 83       	std	Y+2, r23	; 0x02
     164:	8b 83       	std	Y+3, r24	; 0x03
     166:	9c 83       	std	Y+4, r25	; 0x04
     168:	29 01       	movw	r4, r18
     16a:	3a 01       	movw	r6, r20
     16c:	b8 01       	movw	r22, r16
	unsigned char velocity = scale*drive + offset;
     16e:	88 27       	eor	r24, r24
     170:	77 fd       	sbrc	r23, 7
     172:	80 95       	com	r24
     174:	98 2f       	mov	r25, r24
     176:	0e 94 bb 06 	call	0xd76	; 0xd76 <__floatsisf>
     17a:	4b 01       	movw	r8, r22
     17c:	5c 01       	movw	r10, r24
     17e:	c3 01       	movw	r24, r6
     180:	b2 01       	movw	r22, r4
     182:	a7 01       	movw	r20, r14
     184:	96 01       	movw	r18, r12
     186:	0e 94 31 05 	call	0xa62	; 0xa62 <__mulsf3>
     18a:	a5 01       	movw	r20, r10
     18c:	94 01       	movw	r18, r8
     18e:	0e 94 04 05 	call	0xa08	; 0xa08 <__addsf3>
     192:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fixunssfsi>
     196:	7b 01       	movw	r14, r22
     198:	8c 01       	movw	r16, r24

	if(val>0)
     19a:	69 81       	ldd	r22, Y+1	; 0x01
     19c:	7a 81       	ldd	r23, Y+2	; 0x02
     19e:	8b 81       	ldd	r24, Y+3	; 0x03
     1a0:	9c 81       	ldd	r25, Y+4	; 0x04
     1a2:	20 e0       	ldi	r18, 0x00	; 0
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	40 e0       	ldi	r20, 0x00	; 0
     1a8:	50 e0       	ldi	r21, 0x00	; 0
     1aa:	0e 94 2b 06 	call	0xc56	; 0xc56 <__gtsf2>
     1ae:	18 16       	cp	r1, r24
     1b0:	04 f5       	brge	.+64     	; 0x1f2 <my_velocity+0xba>
		{
				if(val<scale+offset)
     1b2:	c3 01       	movw	r24, r6
     1b4:	b2 01       	movw	r22, r4
     1b6:	a5 01       	movw	r20, r10
     1b8:	94 01       	movw	r18, r8
     1ba:	0e 94 04 05 	call	0xa08	; 0xa08 <__addsf3>
     1be:	9b 01       	movw	r18, r22
     1c0:	ac 01       	movw	r20, r24
     1c2:	69 81       	ldd	r22, Y+1	; 0x01
     1c4:	7a 81       	ldd	r23, Y+2	; 0x02
     1c6:	8b 81       	ldd	r24, Y+3	; 0x03
     1c8:	9c 81       	ldd	r25, Y+4	; 0x04
     1ca:	0e 94 8b 06 	call	0xd16	; 0xd16 <__ltsf2>
     1ce:	88 23       	and	r24, r24
     1d0:	3c f4       	brge	.+14     	; 0x1e0 <my_velocity+0xa8>
					soft_right(velocity,0);
     1d2:	8e 2d       	mov	r24, r14
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	0e 94 97 00 	call	0x12e	; 0x12e <soft_right>
     1de:	29 c0       	rjmp	.+82     	; 0x232 <my_velocity+0xfa>
				else
					right(velocity,-velocity);
     1e0:	8e 2d       	mov	r24, r14
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	66 27       	eor	r22, r22
     1e6:	77 27       	eor	r23, r23
     1e8:	68 1b       	sub	r22, r24
     1ea:	79 0b       	sbc	r23, r25
     1ec:	0e 94 8d 00 	call	0x11a	; 0x11a <right>
     1f0:	20 c0       	rjmp	.+64     	; 0x232 <my_velocity+0xfa>
		}
	else
		{
			if(val>-(scale+offset))
     1f2:	c3 01       	movw	r24, r6
     1f4:	b2 01       	movw	r22, r4
     1f6:	a5 01       	movw	r20, r10
     1f8:	94 01       	movw	r18, r8
     1fa:	0e 94 04 05 	call	0xa08	; 0xa08 <__addsf3>
     1fe:	9b 01       	movw	r18, r22
     200:	ac 01       	movw	r20, r24
     202:	50 58       	subi	r21, 0x80	; 128
     204:	69 81       	ldd	r22, Y+1	; 0x01
     206:	7a 81       	ldd	r23, Y+2	; 0x02
     208:	8b 81       	ldd	r24, Y+3	; 0x03
     20a:	9c 81       	ldd	r25, Y+4	; 0x04
     20c:	0e 94 2b 06 	call	0xc56	; 0xc56 <__gtsf2>
     210:	18 16       	cp	r1, r24
     212:	3c f4       	brge	.+14     	; 0x222 <my_velocity+0xea>
				soft_left(0,velocity);
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	6e 2d       	mov	r22, r14
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	0e 94 92 00 	call	0x124	; 0x124 <soft_left>
     220:	08 c0       	rjmp	.+16     	; 0x232 <my_velocity+0xfa>
			else
				left(-velocity,velocity);
     222:	6e 2d       	mov	r22, r14
     224:	70 e0       	ldi	r23, 0x00	; 0
     226:	88 27       	eor	r24, r24
     228:	99 27       	eor	r25, r25
     22a:	86 1b       	sub	r24, r22
     22c:	97 0b       	sbc	r25, r23
     22e:	0e 94 88 00 	call	0x110	; 0x110 <left>
		}
}
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	cf 91       	pop	r28
     23c:	df 91       	pop	r29
     23e:	1f 91       	pop	r17
     240:	0f 91       	pop	r16
     242:	ff 90       	pop	r15
     244:	ef 90       	pop	r14
     246:	df 90       	pop	r13
     248:	cf 90       	pop	r12
     24a:	bf 90       	pop	r11
     24c:	af 90       	pop	r10
     24e:	9f 90       	pop	r9
     250:	8f 90       	pop	r8
     252:	7f 90       	pop	r7
     254:	6f 90       	pop	r6
     256:	5f 90       	pop	r5
     258:	4f 90       	pop	r4
     25a:	08 95       	ret

0000025c <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     25c:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     25e:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     260:	81 60       	ori	r24, 0x01	; 1
 PORTB = PortBRestore; 			// setting the command to the port
     262:	88 bb       	out	0x18, r24	; 24
}

void soft_left_2 (void)     //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     264:	08 95       	ret

00000266 <soft_right_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     266:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     268:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     26a:	88 60       	ori	r24, 0x08	; 8
 PORTB = PortBRestore; 			// setting the command to the port
     26c:	88 bb       	out	0x18, r24	; 24
}

void soft_right_2 (void)    //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     26e:	08 95       	ret

00000270 <hard_stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     270:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     272:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
     274:	88 bb       	out	0x18, r24	; 24
}

void hard_stop (void)       //hard stop(stop suddenly)
{
  motion_set(0x00);
}
     276:	08 95       	ret

00000278 <soft_stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     278:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     27a:	8f 60       	ori	r24, 0x0F	; 15
 PORTB = PortBRestore; 			// setting the command to the port
     27c:	88 bb       	out	0x18, r24	; 24
}

void soft_stop (void)       //soft stop(stops solowly)
{
  motion_set(0x0F);
}
     27e:	08 95       	ret

00000280 <lcd_port_config>:
// timer1_init();
 sei(); //Enables the global interrupts
}
void lcd_port_config (void) 
{ 
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output 
     280:	84 b3       	in	r24, 0x14	; 20
     282:	87 6f       	ori	r24, 0xF7	; 247
     284:	84 bb       	out	0x14, r24	; 20
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7 
     286:	85 b3       	in	r24, 0x15	; 21
     288:	80 78       	andi	r24, 0x80	; 128
     28a:	85 bb       	out	0x15, r24	; 21
} 
     28c:	08 95       	ret

0000028e <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     28e:	8a ef       	ldi	r24, 0xFA	; 250
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	fc 01       	movw	r30, r24
     294:	31 97       	sbiw	r30, 0x01	; 1
     296:	f1 f7       	brne	.-4      	; 0x294 <lcd_set_4bit+0x6>

void lcd_set_4bit() 
{ 
 _delay_ms(1); 
 
 cbit(lcd_port,RS); //RS=0 --- Command Input 
     298:	a8 98       	cbi	0x15, 0	; 21
 cbit(lcd_port,RW); //RW=0 --- Writing to LCD 
     29a:	a9 98       	cbi	0x15, 1	; 21
 lcd_port = 0x30; //Sending 3 in the upper nibble 
     29c:	40 e3       	ldi	r20, 0x30	; 48
     29e:	45 bb       	out	0x15, r20	; 21
 sbit(lcd_port,EN); //Set Enable Pin 
     2a0:	aa 9a       	sbi	0x15, 2	; 21
     2a2:	22 ee       	ldi	r18, 0xE2	; 226
     2a4:	34 e0       	ldi	r19, 0x04	; 4
     2a6:	f9 01       	movw	r30, r18
     2a8:	31 97       	sbiw	r30, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcd_set_4bit+0x1a>
 _delay_ms(5); //delay 
 cbit(lcd_port,EN); //Clear Enable Pin 
     2ac:	aa 98       	cbi	0x15, 2	; 21
     2ae:	fc 01       	movw	r30, r24
     2b0:	31 97       	sbiw	r30, 0x01	; 1
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <lcd_set_4bit+0x22>
_delay_ms(1); 
 
 cbit(lcd_port,RS); //RS=0 --- Command Input 
     2b4:	a8 98       	cbi	0x15, 0	; 21
 cbit(lcd_port,RW); //RW=0 --- Writing to LCD 
     2b6:	a9 98       	cbi	0x15, 1	; 21
 lcd_port = 0x30; //Sending 3 in the upper nibble 
     2b8:	45 bb       	out	0x15, r20	; 21
 sbit(lcd_port,EN); //Set Enable Pin 
     2ba:	aa 9a       	sbi	0x15, 2	; 21
     2bc:	f9 01       	movw	r30, r18
     2be:	31 97       	sbiw	r30, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <lcd_set_4bit+0x30>
 _delay_ms(5); //delay 
 cbit(lcd_port,EN); //Clear Enable Pin 
     2c2:	aa 98       	cbi	0x15, 2	; 21
     2c4:	fc 01       	movw	r30, r24
     2c6:	31 97       	sbiw	r30, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcd_set_4bit+0x38>
 
 _delay_ms(1); 
 
 cbit(lcd_port,RS); //RS=0 --- Command Input 
     2ca:	a8 98       	cbi	0x15, 0	; 21
 cbit(lcd_port,RW); //RW=0 --- Writing to LCD 
     2cc:	a9 98       	cbi	0x15, 1	; 21
 lcd_port = 0x30; //Sending 3 in the upper nibble 
     2ce:	45 bb       	out	0x15, r20	; 21
 sbit(lcd_port,EN); //Set Enable Pin 
     2d0:	aa 9a       	sbi	0x15, 2	; 21
     2d2:	f9 01       	movw	r30, r18
     2d4:	31 97       	sbiw	r30, 0x01	; 1
     2d6:	f1 f7       	brne	.-4      	; 0x2d4 <lcd_set_4bit+0x46>
 _delay_ms(5); //delay 
 cbit(lcd_port,EN); //Clear Enable Pin 
     2d8:	aa 98       	cbi	0x15, 2	; 21
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <lcd_set_4bit+0x4c>
 
 _delay_ms(1); 
 
 cbit(lcd_port,RS); //RS=0 --- Command Input 
     2de:	a8 98       	cbi	0x15, 0	; 21
 cbit(lcd_port,RW); //RW=0 --- Writing to LCD 
     2e0:	a9 98       	cbi	0x15, 1	; 21
 lcd_port = 0x20; //Sending 2 in the upper nibble to initialize LCD 4-bit mode 
     2e2:	80 e2       	ldi	r24, 0x20	; 32
     2e4:	85 bb       	out	0x15, r24	; 21
 sbit(lcd_port,EN); //Set Enable Pin 
     2e6:	aa 9a       	sbi	0x15, 2	; 21
     2e8:	c9 01       	movw	r24, r18
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <lcd_set_4bit+0x5c>
 _delay_ms(5); //delay 
 cbit(lcd_port,EN); //Clear Enable Pin 
     2ee:	aa 98       	cbi	0x15, 2	; 21
} 
     2f0:	08 95       	ret

000002f2 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd) 
{ 
 unsigned char temp; 
 temp = cmd; 
 temp = temp & 0xF0; 
 lcd_port &= 0x0F; 
     2f2:	95 b3       	in	r25, 0x15	; 21
     2f4:	9f 70       	andi	r25, 0x0F	; 15
     2f6:	95 bb       	out	0x15, r25	; 21
 lcd_port |= temp; 
     2f8:	25 b3       	in	r18, 0x15	; 21
     2fa:	98 2f       	mov	r25, r24
     2fc:	90 7f       	andi	r25, 0xF0	; 240
     2fe:	92 2b       	or	r25, r18
     300:	95 bb       	out	0x15, r25	; 21
 cbit(lcd_port,RS); 
     302:	a8 98       	cbi	0x15, 0	; 21
 cbit(lcd_port,RW); 
     304:	a9 98       	cbi	0x15, 1	; 21
 sbit(lcd_port,EN); 
     306:	aa 9a       	sbi	0x15, 2	; 21
     308:	22 ee       	ldi	r18, 0xE2	; 226
     30a:	34 e0       	ldi	r19, 0x04	; 4
     30c:	f9 01       	movw	r30, r18
     30e:	31 97       	sbiw	r30, 0x01	; 1
     310:	f1 f7       	brne	.-4      	; 0x30e <lcd_wr_command+0x1c>
 _delay_ms(5);
cbit(lcd_port,EN); 
     312:	aa 98       	cbi	0x15, 2	; 21
 
 cmd = cmd & 0x0F; 
 cmd = cmd<<4; 
 lcd_port &= 0x0F; 
     314:	95 b3       	in	r25, 0x15	; 21
     316:	9f 70       	andi	r25, 0x0F	; 15
     318:	95 bb       	out	0x15, r25	; 21
 lcd_port |= cmd; 
     31a:	95 b3       	in	r25, 0x15	; 21
     31c:	82 95       	swap	r24
     31e:	80 7f       	andi	r24, 0xF0	; 240
     320:	98 2b       	or	r25, r24
     322:	95 bb       	out	0x15, r25	; 21
 cbit(lcd_port,RS); 
     324:	a8 98       	cbi	0x15, 0	; 21
 cbit(lcd_port,RW); 
     326:	a9 98       	cbi	0x15, 1	; 21
 sbit(lcd_port,EN); 
     328:	aa 9a       	sbi	0x15, 2	; 21
     32a:	c9 01       	movw	r24, r18
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <lcd_wr_command+0x3a>
 _delay_ms(5); 
 cbit(lcd_port,EN); 
     330:	aa 98       	cbi	0x15, 2	; 21
}
     332:	08 95       	ret

00000334 <lcd_init>:
     334:	8a ef       	ldi	r24, 0xFA	; 250
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <lcd_init+0x4>

//Function to Initialize LCD 
void lcd_init() 
{ 
 _delay_ms(1); 
 lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font 
     33c:	88 e2       	ldi	r24, 0x28	; 40
     33e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_wr_command>
 lcd_wr_command(0x01); //Clear LCD display 
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_wr_command>
 lcd_wr_command(0x06); //Auto increment cursor position 
     348:	86 e0       	ldi	r24, 0x06	; 6
     34a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_wr_command>
 lcd_wr_command(0x0E); //Turn on LCD and cursor 
     34e:	8e e0       	ldi	r24, 0x0E	; 14
     350:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_wr_command>
 lcd_wr_command(0x80); //Set cursor position 
     354:	80 e8       	ldi	r24, 0x80	; 128
     356:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_wr_command>
}
     35a:	08 95       	ret

0000035c <init_devices>:
void lcd_print(char, char, unsigned int, int);
void lcd_string(char*);

void init_devices (void)
{
 cli(); //Clears the global interrupts
     35c:	f8 94       	cli
 port_init();
     35e:	0e 94 63 00 	call	0xc6	; 0xc6 <port_init>
}

//Function to Initialize ADC 
void adc_init() 
{ 
 ADCSRA = 0x00; 
     362:	16 b8       	out	0x06, r1	; 6
 ADMUX = 0x20; //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000 
     364:	80 e2       	ldi	r24, 0x20	; 32
     366:	87 b9       	out	0x07, r24	; 7
 ACSR = 0x80; 
     368:	80 e8       	ldi	r24, 0x80	; 128
     36a:	88 b9       	out	0x08, r24	; 8
 ADCSRA = 0x86; //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0 
     36c:	86 e8       	ldi	r24, 0x86	; 134
     36e:	86 b9       	out	0x06, r24	; 6
void init_devices (void)
{
 cli(); //Clears the global interrupts
 port_init();
 adc_init(); 
 lcd_init();
     370:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_init>
 lcd_set_4bit();
     374:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_set_4bit>
 
// timer1_init();
 sei(); //Enables the global interrupts
     378:	78 94       	sei
}
     37a:	08 95       	ret

0000037c <lcd_wr_char>:
{ 
 char temp; 
 
 temp = letter; 
 temp = (temp & 0xF0); 
 lcd_port &= 0x0F; 
     37c:	95 b3       	in	r25, 0x15	; 21
     37e:	9f 70       	andi	r25, 0x0F	; 15
     380:	95 bb       	out	0x15, r25	; 21
 lcd_port |= temp; 
     382:	25 b3       	in	r18, 0x15	; 21
     384:	98 2f       	mov	r25, r24
     386:	90 7f       	andi	r25, 0xF0	; 240
     388:	92 2b       	or	r25, r18
     38a:	95 bb       	out	0x15, r25	; 21
 sbit(lcd_port,RS); 
     38c:	a8 9a       	sbi	0x15, 0	; 21
 cbit(lcd_port,RW); 
     38e:	a9 98       	cbi	0x15, 1	; 21
 sbit(lcd_port,EN); 
     390:	aa 9a       	sbi	0x15, 2	; 21
     392:	22 ee       	ldi	r18, 0xE2	; 226
     394:	34 e0       	ldi	r19, 0x04	; 4
     396:	f9 01       	movw	r30, r18
     398:	31 97       	sbiw	r30, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <lcd_wr_char+0x1c>
 _delay_ms(5); 
cbit(lcd_port,EN); 
     39c:	aa 98       	cbi	0x15, 2	; 21
 
 letter = letter & 0x0F; 
 letter = letter<<4; 
 lcd_port &= 0x0F; 
     39e:	95 b3       	in	r25, 0x15	; 21
     3a0:	9f 70       	andi	r25, 0x0F	; 15
     3a2:	95 bb       	out	0x15, r25	; 21
 lcd_port |= letter; 
     3a4:	95 b3       	in	r25, 0x15	; 21
     3a6:	82 95       	swap	r24
     3a8:	80 7f       	andi	r24, 0xF0	; 240
     3aa:	98 2b       	or	r25, r24
     3ac:	95 bb       	out	0x15, r25	; 21
 sbit(lcd_port,RS); 
     3ae:	a8 9a       	sbi	0x15, 0	; 21
 cbit(lcd_port,RW); 
     3b0:	a9 98       	cbi	0x15, 1	; 21
 sbit(lcd_port,EN); 
     3b2:	aa 9a       	sbi	0x15, 2	; 21
     3b4:	c9 01       	movw	r24, r18
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <lcd_wr_char+0x3a>
 _delay_ms(5); 
 cbit(lcd_port,EN); 
     3ba:	aa 98       	cbi	0x15, 2	; 21
} 
     3bc:	08 95       	ret

000003be <lcd_home>:

void lcd_home() 
{ 
 lcd_wr_command(0x80); 
     3be:	80 e8       	ldi	r24, 0x80	; 128
     3c0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_wr_command>
}
     3c4:	08 95       	ret

000003c6 <lcd_string>:

void lcd_string(char *str) 
{ 
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	ec 01       	movw	r28, r24
     3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <lcd_string+0xe>
 while(*str != '\0') 
 { 
 lcd_wr_char(*str); 
     3ce:	0e 94 be 01 	call	0x37c	; 0x37c <lcd_wr_char>
 str++; 
     3d2:	21 96       	adiw	r28, 0x01	; 1
 lcd_wr_command(0x80); 
}

void lcd_string(char *str) 
{ 
 while(*str != '\0') 
     3d4:	88 81       	ld	r24, Y
     3d6:	88 23       	and	r24, r24
     3d8:	d1 f7       	brne	.-12     	; 0x3ce <lcd_string+0x8>
 { 
 lcd_wr_char(*str); 
 str++; 
 } 
} 
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <lcd_cursor>:

//Position the LCD cursor at "row", "column" 
void lcd_cursor (char row, char column) 
{ 
 switch (row) { 
     3e0:	82 30       	cpi	r24, 0x02	; 2
     3e2:	69 f0       	breq	.+26     	; 0x3fe <lcd_cursor+0x1e>
     3e4:	83 30       	cpi	r24, 0x03	; 3
     3e6:	18 f4       	brcc	.+6      	; 0x3ee <lcd_cursor+0xe>
     3e8:	81 30       	cpi	r24, 0x01	; 1
     3ea:	a9 f4       	brne	.+42     	; 0x416 <lcd_cursor+0x36>
     3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <lcd_cursor+0x18>
     3ee:	83 30       	cpi	r24, 0x03	; 3
     3f0:	49 f0       	breq	.+18     	; 0x404 <lcd_cursor+0x24>
     3f2:	84 30       	cpi	r24, 0x04	; 4
     3f4:	81 f4       	brne	.+32     	; 0x416 <lcd_cursor+0x36>
     3f6:	0b c0       	rjmp	.+22     	; 0x40e <lcd_cursor+0x2e>
 case 1: lcd_wr_command (0x80 + column - 1); break; 
     3f8:	86 2f       	mov	r24, r22
     3fa:	81 58       	subi	r24, 0x81	; 129
     3fc:	05 c0       	rjmp	.+10     	; 0x408 <lcd_cursor+0x28>
 case 2: lcd_wr_command (0xc0 + column - 1); break; 
     3fe:	86 2f       	mov	r24, r22
     400:	81 54       	subi	r24, 0x41	; 65
     402:	02 c0       	rjmp	.+4      	; 0x408 <lcd_cursor+0x28>
 case 3: lcd_wr_command (0x94 + column - 1); break; 
     404:	86 2f       	mov	r24, r22
     406:	8d 56       	subi	r24, 0x6D	; 109
     408:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_wr_command>
     40c:	08 95       	ret
 case 4: lcd_wr_command (0xd4 + column - 1); break; 
     40e:	86 2f       	mov	r24, r22
     410:	8d 52       	subi	r24, 0x2D	; 45
     412:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_wr_command>
     416:	08 95       	ret

00000418 <lcd_print>:
unsigned int hundred;
unsigned int thousand;
unsigned int million;
// Function to print any input value up to the desired digit on LCD 
void lcd_print (char row, char coloumn, unsigned int value, int digits) 
{ 
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	8a 01       	movw	r16, r20
     422:	e9 01       	movw	r28, r18
 unsigned char flag=0; 
 if(row==0||coloumn==0) 
     424:	88 23       	and	r24, r24
     426:	11 f0       	breq	.+4      	; 0x42c <lcd_print+0x14>
     428:	66 23       	and	r22, r22
     42a:	19 f4       	brne	.+6      	; 0x432 <lcd_print+0x1a>
 {
lcd_home(); 
     42c:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_home>
     430:	02 c0       	rjmp	.+4      	; 0x436 <lcd_print+0x1e>
 } 
 else 
 { 
 lcd_cursor(row,coloumn); 
     432:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_cursor>
 } 
 if(digits==5 || flag==1) 
     436:	c5 30       	cpi	r28, 0x05	; 5
     438:	d1 05       	cpc	r29, r1
     43a:	71 f4       	brne	.+28     	; 0x458 <lcd_print+0x40>
 {
million=value/10000+48; 
     43c:	c8 01       	movw	r24, r16
     43e:	60 e1       	ldi	r22, 0x10	; 16
     440:	77 e2       	ldi	r23, 0x27	; 39
     442:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__udivmodhi4>
     446:	cb 01       	movw	r24, r22
     448:	c0 96       	adiw	r24, 0x30	; 48
     44a:	90 93 69 01 	sts	0x0169, r25
     44e:	80 93 68 01 	sts	0x0168, r24
 lcd_wr_char(million); 
     452:	0e 94 be 01 	call	0x37c	; 0x37c <lcd_wr_char>
     456:	05 c0       	rjmp	.+10     	; 0x462 <__stack+0x3>
 flag=1; 
 } 
 if(digits==4 || flag==1) 
     458:	c4 30       	cpi	r28, 0x04	; 4
     45a:	d1 05       	cpc	r29, r1
     45c:	11 f0       	breq	.+4      	; 0x462 <__stack+0x3>
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	16 c0       	rjmp	.+44     	; 0x48e <__stack+0x2f>
 { 
 temp = value/1000; 
     462:	c8 01       	movw	r24, r16
     464:	68 ee       	ldi	r22, 0xE8	; 232
     466:	73 e0       	ldi	r23, 0x03	; 3
     468:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__udivmodhi4>
     46c:	cb 01       	movw	r24, r22
     46e:	60 93 6a 01 	sts	0x016A, r22
     472:	90 93 6b 01 	sts	0x016B, r25
 thousand = temp%10 + 48; 
     476:	6a e0       	ldi	r22, 0x0A	; 10
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__udivmodhi4>
     47e:	c0 96       	adiw	r24, 0x30	; 48
     480:	90 93 73 01 	sts	0x0173, r25
     484:	80 93 72 01 	sts	0x0172, r24
 lcd_wr_char(thousand); 
     488:	0e 94 be 01 	call	0x37c	; 0x37c <lcd_wr_char>
     48c:	81 e0       	ldi	r24, 0x01	; 1
 flag=1; 
 } 
 if(digits==3 || flag==1) 
     48e:	c3 30       	cpi	r28, 0x03	; 3
     490:	d1 05       	cpc	r29, r1
     492:	21 f0       	breq	.+8      	; 0x49c <__stack+0x3d>
     494:	81 30       	cpi	r24, 0x01	; 1
     496:	11 f0       	breq	.+4      	; 0x49c <__stack+0x3d>
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	16 c0       	rjmp	.+44     	; 0x4c8 <__stack+0x69>
 { 
 temp = value/100; 
     49c:	c8 01       	movw	r24, r16
     49e:	64 e6       	ldi	r22, 0x64	; 100
     4a0:	70 e0       	ldi	r23, 0x00	; 0
     4a2:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__udivmodhi4>
     4a6:	cb 01       	movw	r24, r22
     4a8:	60 93 6a 01 	sts	0x016A, r22
     4ac:	90 93 6b 01 	sts	0x016B, r25
 hundred = temp%10 + 48; 
     4b0:	6a e0       	ldi	r22, 0x0A	; 10
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__udivmodhi4>
     4b8:	c0 96       	adiw	r24, 0x30	; 48
     4ba:	90 93 6f 01 	sts	0x016F, r25
     4be:	80 93 6e 01 	sts	0x016E, r24
 lcd_wr_char(hundred); 
     4c2:	0e 94 be 01 	call	0x37c	; 0x37c <lcd_wr_char>
     4c6:	81 e0       	ldi	r24, 0x01	; 1
 flag=1; 
 }
if(digits==2 || flag==1) 
     4c8:	c2 30       	cpi	r28, 0x02	; 2
     4ca:	d1 05       	cpc	r29, r1
     4cc:	21 f0       	breq	.+8      	; 0x4d6 <__stack+0x77>
     4ce:	81 30       	cpi	r24, 0x01	; 1
     4d0:	11 f0       	breq	.+4      	; 0x4d6 <__stack+0x77>
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	16 c0       	rjmp	.+44     	; 0x502 <__stack+0xa3>
 { 
 temp = value/10; 
     4d6:	c8 01       	movw	r24, r16
     4d8:	6a e0       	ldi	r22, 0x0A	; 10
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__udivmodhi4>
     4e0:	cb 01       	movw	r24, r22
     4e2:	60 93 6a 01 	sts	0x016A, r22
     4e6:	90 93 6b 01 	sts	0x016B, r25
 tens = temp%10 + 48; 
     4ea:	6a e0       	ldi	r22, 0x0A	; 10
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__udivmodhi4>
     4f2:	c0 96       	adiw	r24, 0x30	; 48
     4f4:	90 93 6d 01 	sts	0x016D, r25
     4f8:	80 93 6c 01 	sts	0x016C, r24
 lcd_wr_char(tens); 
     4fc:	0e 94 be 01 	call	0x37c	; 0x37c <lcd_wr_char>
     500:	81 e0       	ldi	r24, 0x01	; 1
 flag=1; 
 } 
 if(digits==1 || flag==1) 
     502:	c1 30       	cpi	r28, 0x01	; 1
     504:	d1 05       	cpc	r29, r1
     506:	11 f0       	breq	.+4      	; 0x50c <__stack+0xad>
     508:	81 30       	cpi	r24, 0x01	; 1
     50a:	61 f4       	brne	.+24     	; 0x524 <__stack+0xc5>
 { 
 unit = value%10 + 48; 
     50c:	c8 01       	movw	r24, r16
     50e:	6a e0       	ldi	r22, 0x0A	; 10
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__udivmodhi4>
     516:	c0 96       	adiw	r24, 0x30	; 48
     518:	90 93 71 01 	sts	0x0171, r25
     51c:	80 93 70 01 	sts	0x0170, r24
 lcd_wr_char(unit); 
     520:	0e 94 be 01 	call	0x37c	; 0x37c <lcd_wr_char>
 } 
 if(digits>5) 
     524:	26 97       	sbiw	r28, 0x06	; 6
     526:	1c f0       	brlt	.+6      	; 0x52e <__stack+0xcf>
 { 
 lcd_wr_char('E'); 
     528:	85 e4       	ldi	r24, 0x45	; 69
     52a:	0e 94 be 01 	call	0x37c	; 0x37c <lcd_wr_char>
 } 
} 
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	1f 91       	pop	r17
     534:	0f 91       	pop	r16
     536:	08 95       	ret

00000538 <adc_pin_config>:

//ADC pin configuration 
void adc_pin_config (void) 
{

 DDRA = 0x00; //set PORTA direction as input 
     538:	1a ba       	out	0x1a, r1	; 26
 PORTA = 0x00; //set PORTA pins floating 
     53a:	1b ba       	out	0x1b, r1	; 27
}
     53c:	08 95       	ret

0000053e <adc_init>:

//Function to Initialize ADC 
void adc_init() 
{ 
 ADCSRA = 0x00; 
     53e:	16 b8       	out	0x06, r1	; 6
 ADMUX = 0x20; //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000 
     540:	80 e2       	ldi	r24, 0x20	; 32
     542:	87 b9       	out	0x07, r24	; 7
 ACSR = 0x80; 
     544:	80 e8       	ldi	r24, 0x80	; 128
     546:	88 b9       	out	0x08, r24	; 8
 ADCSRA = 0x86; //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0 
     548:	86 e8       	ldi	r24, 0x86	; 134
     54a:	86 b9       	out	0x06, r24	; 6
} 
     54c:	08 95       	ret

0000054e <ADC_Conversion>:
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch) 
{ 
 unsigned char a; 
 Ch = Ch & 0x07; 
 ADMUX= 0x20| Ch; 
     54e:	87 70       	andi	r24, 0x07	; 7
     550:	80 62       	ori	r24, 0x20	; 32
     552:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40; //Set start conversion bit 
     554:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0); //Wait for ADC conversion to complete 
     556:	34 9b       	sbis	0x06, 4	; 6
     558:	fe cf       	rjmp	.-4      	; 0x556 <ADC_Conversion+0x8>
 a=ADCH; 
     55a:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it 
     55c:	34 9a       	sbi	0x06, 4	; 6
// ADCSRB = 0x00; 
 return a; 
} 
     55e:	08 95       	ret

00000560 <main>:

int main()
{
     560:	2f 92       	push	r2
     562:	3f 92       	push	r3
     564:	4f 92       	push	r4
     566:	5f 92       	push	r5
     568:	6f 92       	push	r6
     56a:	7f 92       	push	r7
     56c:	8f 92       	push	r8
     56e:	9f 92       	push	r9
     570:	af 92       	push	r10
     572:	bf 92       	push	r11
     574:	cf 92       	push	r12
     576:	df 92       	push	r13
     578:	ef 92       	push	r14
     57a:	ff 92       	push	r15
     57c:	0f 93       	push	r16
     57e:	1f 93       	push	r17
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
	init_devices();
     584:	0e 94 ae 01 	call	0x35c	; 0x35c <init_devices>
     588:	88 24       	eor	r8, r8
     58a:	99 24       	eor	r9, r9
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch) 
{ 
 unsigned char a; 
 Ch = Ch & 0x07; 
 ADMUX= 0x20| Ch; 
     58c:	23 e2       	ldi	r18, 0x23	; 35
     58e:	27 b9       	out	0x07, r18	; 7
 ADCSRA = ADCSRA | 0x40; //Set start conversion bit 
     590:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0); //Wait for ADC conversion to complete 
     592:	34 9b       	sbis	0x06, 4	; 6
     594:	fe cf       	rjmp	.-4      	; 0x592 <main+0x32>
 a=ADCH; 
     596:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it 
     598:	34 9a       	sbi	0x06, 4	; 6
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch) 
{ 
 unsigned char a; 
 Ch = Ch & 0x07; 
 ADMUX= 0x20| Ch; 
     59a:	35 e2       	ldi	r19, 0x25	; 37
     59c:	37 b9       	out	0x07, r19	; 7
 ADCSRA = ADCSRA | 0x40; //Set start conversion bit 
     59e:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0); //Wait for ADC conversion to complete 
     5a0:	34 9b       	sbis	0x06, 4	; 6
     5a2:	fe cf       	rjmp	.-4      	; 0x5a0 <main+0x40>
 a=ADCH; 
     5a4:	65 b1       	in	r22, 0x05	; 5
 ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it 
     5a6:	34 9a       	sbi	0x06, 4	; 6
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch) 
{ 
 unsigned char a; 
 Ch = Ch & 0x07; 
 ADMUX= 0x20| Ch; 
     5a8:	94 e2       	ldi	r25, 0x24	; 36
     5aa:	97 b9       	out	0x07, r25	; 7
 ADCSRA = ADCSRA | 0x40; //Set start conversion bit 
     5ac:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0); //Wait for ADC conversion to complete 
     5ae:	34 9b       	sbis	0x06, 4	; 6
     5b0:	fe cf       	rjmp	.-4      	; 0x5ae <main+0x4e>
 a=ADCH; 
     5b2:	95 b1       	in	r25, 0x05	; 5
 ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it 
     5b4:	34 9a       	sbi	0x06, 4	; 6
		right_sensor = ADC_Conversion(5);
		center_sensor = ADC_Conversion(4);

		left_center  = left_sensor - center_sensor;
		right_center = right_sensor - center_sensor;
		right_left   = right_sensor - left_sensor;
     5b6:	c6 2f       	mov	r28, r22
     5b8:	d0 e0       	ldi	r29, 0x00	; 0
     5ba:	c8 1b       	sub	r28, r24
     5bc:	d1 09       	sbc	r29, r1
		unsigned int left_sensor_disp = left_sensor;		
		unsigned int right_sensor_disp = right_sensor;
		unsigned int center_sensor_disp = center_sensor;		


		float pid_drive = Kp*right_left+Kd*(right_left-old_right_left);
     5be:	be 01       	movw	r22, r28
     5c0:	88 27       	eor	r24, r24
     5c2:	77 fd       	sbrc	r23, 7
     5c4:	80 95       	com	r24
     5c6:	98 2f       	mov	r25, r24
     5c8:	0e 94 bb 06 	call	0xd76	; 0xd76 <__floatsisf>
     5cc:	5b 01       	movw	r10, r22
     5ce:	6c 01       	movw	r12, r24
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	51 e4       	ldi	r21, 0x41	; 65
     5d8:	0e 94 31 05 	call	0xa62	; 0xa62 <__mulsf3>
     5dc:	7b 01       	movw	r14, r22
     5de:	8c 01       	movw	r16, r24
     5e0:	ce 01       	movw	r24, r28
     5e2:	88 19       	sub	r24, r8
     5e4:	99 09       	sbc	r25, r9
     5e6:	27 e3       	ldi	r18, 0x37	; 55
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	82 9f       	mul	r24, r18
     5ec:	b0 01       	movw	r22, r0
     5ee:	83 9f       	mul	r24, r19
     5f0:	70 0d       	add	r23, r0
     5f2:	92 9f       	mul	r25, r18
     5f4:	70 0d       	add	r23, r0
     5f6:	11 24       	eor	r1, r1
     5f8:	88 27       	eor	r24, r24
     5fa:	77 fd       	sbrc	r23, 7
     5fc:	80 95       	com	r24
     5fe:	98 2f       	mov	r25, r24
     600:	0e 94 bb 06 	call	0xd76	; 0xd76 <__floatsisf>
     604:	9b 01       	movw	r18, r22
     606:	ac 01       	movw	r20, r24
     608:	c8 01       	movw	r24, r16
     60a:	b7 01       	movw	r22, r14
     60c:	0e 94 04 05 	call	0xa08	; 0xa08 <__addsf3>
     610:	1b 01       	movw	r2, r22
     612:	2c 01       	movw	r4, r24

		if(right_left>0)
     614:	1c 16       	cp	r1, r28
     616:	1d 06       	cpc	r1, r29
     618:	5c f4       	brge	.+22     	; 0x630 <main+0xd0>
			thresh = (primary_offset - pid_drive);
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	93 e4       	ldi	r25, 0x43	; 67
     622:	a2 01       	movw	r20, r4
     624:	91 01       	movw	r18, r2
     626:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__subsf3>
     62a:	7b 01       	movw	r14, r22
     62c:	8c 01       	movw	r16, r24
     62e:	0c c0       	rjmp	.+24     	; 0x648 <main+0xe8>
		else
			thresh = -(primary_offset + pid_drive);
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	53 e4       	ldi	r21, 0x43	; 67
     638:	0e 94 04 05 	call	0xa08	; 0xa08 <__addsf3>
     63c:	7b 01       	movw	r14, r22
     63e:	8c 01       	movw	r16, r24
     640:	17 fb       	bst	r17, 7
     642:	10 95       	com	r17
     644:	17 f9       	bld	r17, 7
     646:	10 95       	com	r17
			
		if(right_left>(-thresh) && right_left<(thresh))
     648:	37 01       	movw	r6, r14
     64a:	48 01       	movw	r8, r16
     64c:	97 fa       	bst	r9, 7
     64e:	90 94       	com	r9
     650:	97 f8       	bld	r9, 7
     652:	90 94       	com	r9
     654:	c6 01       	movw	r24, r12
     656:	b5 01       	movw	r22, r10
     658:	a4 01       	movw	r20, r8
     65a:	93 01       	movw	r18, r6
     65c:	0e 94 2b 06 	call	0xc56	; 0xc56 <__gtsf2>
     660:	18 16       	cp	r1, r24
     662:	44 f4       	brge	.+16     	; 0x674 <main+0x114>
     664:	c6 01       	movw	r24, r12
     666:	b5 01       	movw	r22, r10
     668:	a8 01       	movw	r20, r16
     66a:	97 01       	movw	r18, r14
     66c:	0e 94 8b 06 	call	0xd16	; 0xd16 <__ltsf2>
     670:	88 23       	and	r24, r24
     672:	dc f0       	brlt	.+54     	; 0x6aa <main+0x14a>
			{
				forward();
			}
		else if(right_left<(-thresh) || right_left>(thresh))
     674:	c6 01       	movw	r24, r12
     676:	b5 01       	movw	r22, r10
     678:	a4 01       	movw	r20, r8
     67a:	93 01       	movw	r18, r6
     67c:	0e 94 8b 06 	call	0xd16	; 0xd16 <__ltsf2>
     680:	87 fd       	sbrc	r24, 7
     682:	08 c0       	rjmp	.+16     	; 0x694 <main+0x134>
     684:	c6 01       	movw	r24, r12
     686:	b5 01       	movw	r22, r10
     688:	a8 01       	movw	r20, r16
     68a:	97 01       	movw	r18, r14
     68c:	0e 94 2b 06 	call	0xc56	; 0xc56 <__gtsf2>
     690:	18 16       	cp	r1, r24
     692:	5c f4       	brge	.+22     	; 0x6aa <main+0x14a>
					{
						my_velocity(right_left,thresh,secondary_offset,pid_drive);
					}
				else
					{
						my_velocity(right_left,thresh,secondary_offset,pid_drive);
     694:	c6 01       	movw	r24, r12
     696:	b5 01       	movw	r22, r10
     698:	a8 01       	movw	r20, r16
     69a:	97 01       	movw	r18, r14
     69c:	0a e1       	ldi	r16, 0x1A	; 26
     69e:	10 e0       	ldi	r17, 0x00	; 0
     6a0:	72 01       	movw	r14, r4
     6a2:	61 01       	movw	r12, r2
     6a4:	0e 94 9c 00 	call	0x138	; 0x138 <my_velocity>
     6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <main+0x152>
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
     6aa:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
     6ac:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
     6ae:	86 60       	ori	r24, 0x06	; 6
 PORTB = PortBRestore; 			// setting the command to the port
     6b0:	88 bb       	out	0x18, r24	; 24
     6b2:	4e 01       	movw	r8, r28
     6b4:	6b cf       	rjmp	.-298    	; 0x58c <main+0x2c>

000006b6 <__fixunssfsi>:
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	7b 01       	movw	r14, r22
     6c0:	8c 01       	movw	r16, r24
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	40 e0       	ldi	r20, 0x00	; 0
     6c8:	5f e4       	ldi	r21, 0x4F	; 79
     6ca:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__gesf2>
     6ce:	88 23       	and	r24, r24
     6d0:	8c f0       	brlt	.+34     	; 0x6f4 <__fixunssfsi+0x3e>
     6d2:	c8 01       	movw	r24, r16
     6d4:	b7 01       	movw	r22, r14
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	5f e4       	ldi	r21, 0x4F	; 79
     6de:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__subsf3>
     6e2:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixsfsi>
     6e6:	9b 01       	movw	r18, r22
     6e8:	ac 01       	movw	r20, r24
     6ea:	20 50       	subi	r18, 0x00	; 0
     6ec:	30 40       	sbci	r19, 0x00	; 0
     6ee:	40 40       	sbci	r20, 0x00	; 0
     6f0:	50 48       	sbci	r21, 0x80	; 128
     6f2:	06 c0       	rjmp	.+12     	; 0x700 <__fixunssfsi+0x4a>
     6f4:	c8 01       	movw	r24, r16
     6f6:	b7 01       	movw	r22, r14
     6f8:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixsfsi>
     6fc:	9b 01       	movw	r18, r22
     6fe:	ac 01       	movw	r20, r24
     700:	b9 01       	movw	r22, r18
     702:	ca 01       	movw	r24, r20
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	08 95       	ret

0000070e <_fpadd_parts>:
     70e:	a0 e0       	ldi	r26, 0x00	; 0
     710:	b0 e0       	ldi	r27, 0x00	; 0
     712:	ed e8       	ldi	r30, 0x8D	; 141
     714:	f3 e0       	ldi	r31, 0x03	; 3
     716:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__prologue_saves__>
     71a:	dc 01       	movw	r26, r24
     71c:	2b 01       	movw	r4, r22
     71e:	fa 01       	movw	r30, r20
     720:	9c 91       	ld	r25, X
     722:	92 30       	cpi	r25, 0x02	; 2
     724:	08 f4       	brcc	.+2      	; 0x728 <_fpadd_parts+0x1a>
     726:	39 c1       	rjmp	.+626    	; 0x99a <_fpadd_parts+0x28c>
     728:	eb 01       	movw	r28, r22
     72a:	88 81       	ld	r24, Y
     72c:	82 30       	cpi	r24, 0x02	; 2
     72e:	08 f4       	brcc	.+2      	; 0x732 <_fpadd_parts+0x24>
     730:	33 c1       	rjmp	.+614    	; 0x998 <_fpadd_parts+0x28a>
     732:	94 30       	cpi	r25, 0x04	; 4
     734:	69 f4       	brne	.+26     	; 0x750 <_fpadd_parts+0x42>
     736:	84 30       	cpi	r24, 0x04	; 4
     738:	09 f0       	breq	.+2      	; 0x73c <_fpadd_parts+0x2e>
     73a:	2f c1       	rjmp	.+606    	; 0x99a <_fpadd_parts+0x28c>
     73c:	11 96       	adiw	r26, 0x01	; 1
     73e:	9c 91       	ld	r25, X
     740:	11 97       	sbiw	r26, 0x01	; 1
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	98 17       	cp	r25, r24
     746:	09 f4       	brne	.+2      	; 0x74a <_fpadd_parts+0x3c>
     748:	28 c1       	rjmp	.+592    	; 0x99a <_fpadd_parts+0x28c>
     74a:	a0 e6       	ldi	r26, 0x60	; 96
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	25 c1       	rjmp	.+586    	; 0x99a <_fpadd_parts+0x28c>
     750:	84 30       	cpi	r24, 0x04	; 4
     752:	09 f4       	brne	.+2      	; 0x756 <_fpadd_parts+0x48>
     754:	21 c1       	rjmp	.+578    	; 0x998 <_fpadd_parts+0x28a>
     756:	82 30       	cpi	r24, 0x02	; 2
     758:	a9 f4       	brne	.+42     	; 0x784 <_fpadd_parts+0x76>
     75a:	92 30       	cpi	r25, 0x02	; 2
     75c:	09 f0       	breq	.+2      	; 0x760 <_fpadd_parts+0x52>
     75e:	1d c1       	rjmp	.+570    	; 0x99a <_fpadd_parts+0x28c>
     760:	9a 01       	movw	r18, r20
     762:	ad 01       	movw	r20, r26
     764:	88 e0       	ldi	r24, 0x08	; 8
     766:	ea 01       	movw	r28, r20
     768:	09 90       	ld	r0, Y+
     76a:	ae 01       	movw	r20, r28
     76c:	e9 01       	movw	r28, r18
     76e:	09 92       	st	Y+, r0
     770:	9e 01       	movw	r18, r28
     772:	81 50       	subi	r24, 0x01	; 1
     774:	c1 f7       	brne	.-16     	; 0x766 <_fpadd_parts+0x58>
     776:	e2 01       	movw	r28, r4
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	11 96       	adiw	r26, 0x01	; 1
     77c:	9c 91       	ld	r25, X
     77e:	89 23       	and	r24, r25
     780:	81 83       	std	Z+1, r24	; 0x01
     782:	08 c1       	rjmp	.+528    	; 0x994 <_fpadd_parts+0x286>
     784:	92 30       	cpi	r25, 0x02	; 2
     786:	09 f4       	brne	.+2      	; 0x78a <_fpadd_parts+0x7c>
     788:	07 c1       	rjmp	.+526    	; 0x998 <_fpadd_parts+0x28a>
     78a:	12 96       	adiw	r26, 0x02	; 2
     78c:	2d 90       	ld	r2, X+
     78e:	3c 90       	ld	r3, X
     790:	13 97       	sbiw	r26, 0x03	; 3
     792:	eb 01       	movw	r28, r22
     794:	8a 81       	ldd	r24, Y+2	; 0x02
     796:	9b 81       	ldd	r25, Y+3	; 0x03
     798:	14 96       	adiw	r26, 0x04	; 4
     79a:	ad 90       	ld	r10, X+
     79c:	bd 90       	ld	r11, X+
     79e:	cd 90       	ld	r12, X+
     7a0:	dc 90       	ld	r13, X
     7a2:	17 97       	sbiw	r26, 0x07	; 7
     7a4:	ec 80       	ldd	r14, Y+4	; 0x04
     7a6:	fd 80       	ldd	r15, Y+5	; 0x05
     7a8:	0e 81       	ldd	r16, Y+6	; 0x06
     7aa:	1f 81       	ldd	r17, Y+7	; 0x07
     7ac:	91 01       	movw	r18, r2
     7ae:	28 1b       	sub	r18, r24
     7b0:	39 0b       	sbc	r19, r25
     7b2:	b9 01       	movw	r22, r18
     7b4:	37 ff       	sbrs	r19, 7
     7b6:	04 c0       	rjmp	.+8      	; 0x7c0 <_fpadd_parts+0xb2>
     7b8:	66 27       	eor	r22, r22
     7ba:	77 27       	eor	r23, r23
     7bc:	62 1b       	sub	r22, r18
     7be:	73 0b       	sbc	r23, r19
     7c0:	60 32       	cpi	r22, 0x20	; 32
     7c2:	71 05       	cpc	r23, r1
     7c4:	0c f0       	brlt	.+2      	; 0x7c8 <_fpadd_parts+0xba>
     7c6:	61 c0       	rjmp	.+194    	; 0x88a <_fpadd_parts+0x17c>
     7c8:	12 16       	cp	r1, r18
     7ca:	13 06       	cpc	r1, r19
     7cc:	6c f5       	brge	.+90     	; 0x828 <_fpadd_parts+0x11a>
     7ce:	37 01       	movw	r6, r14
     7d0:	48 01       	movw	r8, r16
     7d2:	06 2e       	mov	r0, r22
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <_fpadd_parts+0xd0>
     7d6:	96 94       	lsr	r9
     7d8:	87 94       	ror	r8
     7da:	77 94       	ror	r7
     7dc:	67 94       	ror	r6
     7de:	0a 94       	dec	r0
     7e0:	d2 f7       	brpl	.-12     	; 0x7d6 <_fpadd_parts+0xc8>
     7e2:	21 e0       	ldi	r18, 0x01	; 1
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <_fpadd_parts+0xe6>
     7ec:	22 0f       	add	r18, r18
     7ee:	33 1f       	adc	r19, r19
     7f0:	44 1f       	adc	r20, r20
     7f2:	55 1f       	adc	r21, r21
     7f4:	6a 95       	dec	r22
     7f6:	d2 f7       	brpl	.-12     	; 0x7ec <_fpadd_parts+0xde>
     7f8:	21 50       	subi	r18, 0x01	; 1
     7fa:	30 40       	sbci	r19, 0x00	; 0
     7fc:	40 40       	sbci	r20, 0x00	; 0
     7fe:	50 40       	sbci	r21, 0x00	; 0
     800:	2e 21       	and	r18, r14
     802:	3f 21       	and	r19, r15
     804:	40 23       	and	r20, r16
     806:	51 23       	and	r21, r17
     808:	21 15       	cp	r18, r1
     80a:	31 05       	cpc	r19, r1
     80c:	41 05       	cpc	r20, r1
     80e:	51 05       	cpc	r21, r1
     810:	21 f0       	breq	.+8      	; 0x81a <_fpadd_parts+0x10c>
     812:	21 e0       	ldi	r18, 0x01	; 1
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	40 e0       	ldi	r20, 0x00	; 0
     818:	50 e0       	ldi	r21, 0x00	; 0
     81a:	79 01       	movw	r14, r18
     81c:	8a 01       	movw	r16, r20
     81e:	e6 28       	or	r14, r6
     820:	f7 28       	or	r15, r7
     822:	08 29       	or	r16, r8
     824:	19 29       	or	r17, r9
     826:	3c c0       	rjmp	.+120    	; 0x8a0 <_fpadd_parts+0x192>
     828:	23 2b       	or	r18, r19
     82a:	d1 f1       	breq	.+116    	; 0x8a0 <_fpadd_parts+0x192>
     82c:	26 0e       	add	r2, r22
     82e:	37 1e       	adc	r3, r23
     830:	35 01       	movw	r6, r10
     832:	46 01       	movw	r8, r12
     834:	06 2e       	mov	r0, r22
     836:	04 c0       	rjmp	.+8      	; 0x840 <_fpadd_parts+0x132>
     838:	96 94       	lsr	r9
     83a:	87 94       	ror	r8
     83c:	77 94       	ror	r7
     83e:	67 94       	ror	r6
     840:	0a 94       	dec	r0
     842:	d2 f7       	brpl	.-12     	; 0x838 <_fpadd_parts+0x12a>
     844:	21 e0       	ldi	r18, 0x01	; 1
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	04 c0       	rjmp	.+8      	; 0x856 <_fpadd_parts+0x148>
     84e:	22 0f       	add	r18, r18
     850:	33 1f       	adc	r19, r19
     852:	44 1f       	adc	r20, r20
     854:	55 1f       	adc	r21, r21
     856:	6a 95       	dec	r22
     858:	d2 f7       	brpl	.-12     	; 0x84e <_fpadd_parts+0x140>
     85a:	21 50       	subi	r18, 0x01	; 1
     85c:	30 40       	sbci	r19, 0x00	; 0
     85e:	40 40       	sbci	r20, 0x00	; 0
     860:	50 40       	sbci	r21, 0x00	; 0
     862:	2a 21       	and	r18, r10
     864:	3b 21       	and	r19, r11
     866:	4c 21       	and	r20, r12
     868:	5d 21       	and	r21, r13
     86a:	21 15       	cp	r18, r1
     86c:	31 05       	cpc	r19, r1
     86e:	41 05       	cpc	r20, r1
     870:	51 05       	cpc	r21, r1
     872:	21 f0       	breq	.+8      	; 0x87c <_fpadd_parts+0x16e>
     874:	21 e0       	ldi	r18, 0x01	; 1
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	40 e0       	ldi	r20, 0x00	; 0
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	59 01       	movw	r10, r18
     87e:	6a 01       	movw	r12, r20
     880:	a6 28       	or	r10, r6
     882:	b7 28       	or	r11, r7
     884:	c8 28       	or	r12, r8
     886:	d9 28       	or	r13, r9
     888:	0b c0       	rjmp	.+22     	; 0x8a0 <_fpadd_parts+0x192>
     88a:	82 15       	cp	r24, r2
     88c:	93 05       	cpc	r25, r3
     88e:	2c f0       	brlt	.+10     	; 0x89a <_fpadd_parts+0x18c>
     890:	1c 01       	movw	r2, r24
     892:	aa 24       	eor	r10, r10
     894:	bb 24       	eor	r11, r11
     896:	65 01       	movw	r12, r10
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <_fpadd_parts+0x192>
     89a:	ee 24       	eor	r14, r14
     89c:	ff 24       	eor	r15, r15
     89e:	87 01       	movw	r16, r14
     8a0:	11 96       	adiw	r26, 0x01	; 1
     8a2:	9c 91       	ld	r25, X
     8a4:	d2 01       	movw	r26, r4
     8a6:	11 96       	adiw	r26, 0x01	; 1
     8a8:	8c 91       	ld	r24, X
     8aa:	98 17       	cp	r25, r24
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <_fpadd_parts+0x1a2>
     8ae:	45 c0       	rjmp	.+138    	; 0x93a <_fpadd_parts+0x22c>
     8b0:	99 23       	and	r25, r25
     8b2:	39 f0       	breq	.+14     	; 0x8c2 <_fpadd_parts+0x1b4>
     8b4:	a8 01       	movw	r20, r16
     8b6:	97 01       	movw	r18, r14
     8b8:	2a 19       	sub	r18, r10
     8ba:	3b 09       	sbc	r19, r11
     8bc:	4c 09       	sbc	r20, r12
     8be:	5d 09       	sbc	r21, r13
     8c0:	06 c0       	rjmp	.+12     	; 0x8ce <_fpadd_parts+0x1c0>
     8c2:	a6 01       	movw	r20, r12
     8c4:	95 01       	movw	r18, r10
     8c6:	2e 19       	sub	r18, r14
     8c8:	3f 09       	sbc	r19, r15
     8ca:	40 0b       	sbc	r20, r16
     8cc:	51 0b       	sbc	r21, r17
     8ce:	57 fd       	sbrc	r21, 7
     8d0:	08 c0       	rjmp	.+16     	; 0x8e2 <_fpadd_parts+0x1d4>
     8d2:	11 82       	std	Z+1, r1	; 0x01
     8d4:	33 82       	std	Z+3, r3	; 0x03
     8d6:	22 82       	std	Z+2, r2	; 0x02
     8d8:	24 83       	std	Z+4, r18	; 0x04
     8da:	35 83       	std	Z+5, r19	; 0x05
     8dc:	46 83       	std	Z+6, r20	; 0x06
     8de:	57 83       	std	Z+7, r21	; 0x07
     8e0:	1d c0       	rjmp	.+58     	; 0x91c <_fpadd_parts+0x20e>
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	81 83       	std	Z+1, r24	; 0x01
     8e6:	33 82       	std	Z+3, r3	; 0x03
     8e8:	22 82       	std	Z+2, r2	; 0x02
     8ea:	88 27       	eor	r24, r24
     8ec:	99 27       	eor	r25, r25
     8ee:	dc 01       	movw	r26, r24
     8f0:	82 1b       	sub	r24, r18
     8f2:	93 0b       	sbc	r25, r19
     8f4:	a4 0b       	sbc	r26, r20
     8f6:	b5 0b       	sbc	r27, r21
     8f8:	84 83       	std	Z+4, r24	; 0x04
     8fa:	95 83       	std	Z+5, r25	; 0x05
     8fc:	a6 83       	std	Z+6, r26	; 0x06
     8fe:	b7 83       	std	Z+7, r27	; 0x07
     900:	0d c0       	rjmp	.+26     	; 0x91c <_fpadd_parts+0x20e>
     902:	22 0f       	add	r18, r18
     904:	33 1f       	adc	r19, r19
     906:	44 1f       	adc	r20, r20
     908:	55 1f       	adc	r21, r21
     90a:	24 83       	std	Z+4, r18	; 0x04
     90c:	35 83       	std	Z+5, r19	; 0x05
     90e:	46 83       	std	Z+6, r20	; 0x06
     910:	57 83       	std	Z+7, r21	; 0x07
     912:	82 81       	ldd	r24, Z+2	; 0x02
     914:	93 81       	ldd	r25, Z+3	; 0x03
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	93 83       	std	Z+3, r25	; 0x03
     91a:	82 83       	std	Z+2, r24	; 0x02
     91c:	24 81       	ldd	r18, Z+4	; 0x04
     91e:	35 81       	ldd	r19, Z+5	; 0x05
     920:	46 81       	ldd	r20, Z+6	; 0x06
     922:	57 81       	ldd	r21, Z+7	; 0x07
     924:	da 01       	movw	r26, r20
     926:	c9 01       	movw	r24, r18
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	a1 09       	sbc	r26, r1
     92c:	b1 09       	sbc	r27, r1
     92e:	8f 5f       	subi	r24, 0xFF	; 255
     930:	9f 4f       	sbci	r25, 0xFF	; 255
     932:	af 4f       	sbci	r26, 0xFF	; 255
     934:	bf 43       	sbci	r27, 0x3F	; 63
     936:	28 f3       	brcs	.-54     	; 0x902 <_fpadd_parts+0x1f4>
     938:	0b c0       	rjmp	.+22     	; 0x950 <_fpadd_parts+0x242>
     93a:	91 83       	std	Z+1, r25	; 0x01
     93c:	33 82       	std	Z+3, r3	; 0x03
     93e:	22 82       	std	Z+2, r2	; 0x02
     940:	ea 0c       	add	r14, r10
     942:	fb 1c       	adc	r15, r11
     944:	0c 1d       	adc	r16, r12
     946:	1d 1d       	adc	r17, r13
     948:	e4 82       	std	Z+4, r14	; 0x04
     94a:	f5 82       	std	Z+5, r15	; 0x05
     94c:	06 83       	std	Z+6, r16	; 0x06
     94e:	17 83       	std	Z+7, r17	; 0x07
     950:	83 e0       	ldi	r24, 0x03	; 3
     952:	80 83       	st	Z, r24
     954:	24 81       	ldd	r18, Z+4	; 0x04
     956:	35 81       	ldd	r19, Z+5	; 0x05
     958:	46 81       	ldd	r20, Z+6	; 0x06
     95a:	57 81       	ldd	r21, Z+7	; 0x07
     95c:	57 ff       	sbrs	r21, 7
     95e:	1a c0       	rjmp	.+52     	; 0x994 <_fpadd_parts+0x286>
     960:	c9 01       	movw	r24, r18
     962:	aa 27       	eor	r26, r26
     964:	97 fd       	sbrc	r25, 7
     966:	a0 95       	com	r26
     968:	ba 2f       	mov	r27, r26
     96a:	81 70       	andi	r24, 0x01	; 1
     96c:	90 70       	andi	r25, 0x00	; 0
     96e:	a0 70       	andi	r26, 0x00	; 0
     970:	b0 70       	andi	r27, 0x00	; 0
     972:	56 95       	lsr	r21
     974:	47 95       	ror	r20
     976:	37 95       	ror	r19
     978:	27 95       	ror	r18
     97a:	82 2b       	or	r24, r18
     97c:	93 2b       	or	r25, r19
     97e:	a4 2b       	or	r26, r20
     980:	b5 2b       	or	r27, r21
     982:	84 83       	std	Z+4, r24	; 0x04
     984:	95 83       	std	Z+5, r25	; 0x05
     986:	a6 83       	std	Z+6, r26	; 0x06
     988:	b7 83       	std	Z+7, r27	; 0x07
     98a:	82 81       	ldd	r24, Z+2	; 0x02
     98c:	93 81       	ldd	r25, Z+3	; 0x03
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	93 83       	std	Z+3, r25	; 0x03
     992:	82 83       	std	Z+2, r24	; 0x02
     994:	df 01       	movw	r26, r30
     996:	01 c0       	rjmp	.+2      	; 0x99a <_fpadd_parts+0x28c>
     998:	d2 01       	movw	r26, r4
     99a:	cd 01       	movw	r24, r26
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
     9a0:	e2 e1       	ldi	r30, 0x12	; 18
     9a2:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__epilogue_restores__>

000009a6 <__subsf3>:
     9a6:	a0 e2       	ldi	r26, 0x20	; 32
     9a8:	b0 e0       	ldi	r27, 0x00	; 0
     9aa:	e9 ed       	ldi	r30, 0xD9	; 217
     9ac:	f4 e0       	ldi	r31, 0x04	; 4
     9ae:	0c 94 82 09 	jmp	0x1304	; 0x1304 <__prologue_saves__+0x18>
     9b2:	69 83       	std	Y+1, r22	; 0x01
     9b4:	7a 83       	std	Y+2, r23	; 0x02
     9b6:	8b 83       	std	Y+3, r24	; 0x03
     9b8:	9c 83       	std	Y+4, r25	; 0x04
     9ba:	2d 83       	std	Y+5, r18	; 0x05
     9bc:	3e 83       	std	Y+6, r19	; 0x06
     9be:	4f 83       	std	Y+7, r20	; 0x07
     9c0:	58 87       	std	Y+8, r21	; 0x08
     9c2:	e9 e0       	ldi	r30, 0x09	; 9
     9c4:	ee 2e       	mov	r14, r30
     9c6:	f1 2c       	mov	r15, r1
     9c8:	ec 0e       	add	r14, r28
     9ca:	fd 1e       	adc	r15, r29
     9cc:	ce 01       	movw	r24, r28
     9ce:	01 96       	adiw	r24, 0x01	; 1
     9d0:	b7 01       	movw	r22, r14
     9d2:	0e 94 91 08 	call	0x1122	; 0x1122 <__unpack_f>
     9d6:	8e 01       	movw	r16, r28
     9d8:	0f 5e       	subi	r16, 0xEF	; 239
     9da:	1f 4f       	sbci	r17, 0xFF	; 255
     9dc:	ce 01       	movw	r24, r28
     9de:	05 96       	adiw	r24, 0x05	; 5
     9e0:	b8 01       	movw	r22, r16
     9e2:	0e 94 91 08 	call	0x1122	; 0x1122 <__unpack_f>
     9e6:	8a 89       	ldd	r24, Y+18	; 0x12
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	89 27       	eor	r24, r25
     9ec:	8a 8b       	std	Y+18, r24	; 0x12
     9ee:	c7 01       	movw	r24, r14
     9f0:	b8 01       	movw	r22, r16
     9f2:	ae 01       	movw	r20, r28
     9f4:	47 5e       	subi	r20, 0xE7	; 231
     9f6:	5f 4f       	sbci	r21, 0xFF	; 255
     9f8:	0e 94 87 03 	call	0x70e	; 0x70e <_fpadd_parts>
     9fc:	0e 94 bc 07 	call	0xf78	; 0xf78 <__pack_f>
     a00:	a0 96       	adiw	r28, 0x20	; 32
     a02:	e6 e0       	ldi	r30, 0x06	; 6
     a04:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__epilogue_restores__+0x18>

00000a08 <__addsf3>:
     a08:	a0 e2       	ldi	r26, 0x20	; 32
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	ea e0       	ldi	r30, 0x0A	; 10
     a0e:	f5 e0       	ldi	r31, 0x05	; 5
     a10:	0c 94 82 09 	jmp	0x1304	; 0x1304 <__prologue_saves__+0x18>
     a14:	69 83       	std	Y+1, r22	; 0x01
     a16:	7a 83       	std	Y+2, r23	; 0x02
     a18:	8b 83       	std	Y+3, r24	; 0x03
     a1a:	9c 83       	std	Y+4, r25	; 0x04
     a1c:	2d 83       	std	Y+5, r18	; 0x05
     a1e:	3e 83       	std	Y+6, r19	; 0x06
     a20:	4f 83       	std	Y+7, r20	; 0x07
     a22:	58 87       	std	Y+8, r21	; 0x08
     a24:	f9 e0       	ldi	r31, 0x09	; 9
     a26:	ef 2e       	mov	r14, r31
     a28:	f1 2c       	mov	r15, r1
     a2a:	ec 0e       	add	r14, r28
     a2c:	fd 1e       	adc	r15, r29
     a2e:	ce 01       	movw	r24, r28
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	b7 01       	movw	r22, r14
     a34:	0e 94 91 08 	call	0x1122	; 0x1122 <__unpack_f>
     a38:	8e 01       	movw	r16, r28
     a3a:	0f 5e       	subi	r16, 0xEF	; 239
     a3c:	1f 4f       	sbci	r17, 0xFF	; 255
     a3e:	ce 01       	movw	r24, r28
     a40:	05 96       	adiw	r24, 0x05	; 5
     a42:	b8 01       	movw	r22, r16
     a44:	0e 94 91 08 	call	0x1122	; 0x1122 <__unpack_f>
     a48:	c7 01       	movw	r24, r14
     a4a:	b8 01       	movw	r22, r16
     a4c:	ae 01       	movw	r20, r28
     a4e:	47 5e       	subi	r20, 0xE7	; 231
     a50:	5f 4f       	sbci	r21, 0xFF	; 255
     a52:	0e 94 87 03 	call	0x70e	; 0x70e <_fpadd_parts>
     a56:	0e 94 bc 07 	call	0xf78	; 0xf78 <__pack_f>
     a5a:	a0 96       	adiw	r28, 0x20	; 32
     a5c:	e6 e0       	ldi	r30, 0x06	; 6
     a5e:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__epilogue_restores__+0x18>

00000a62 <__mulsf3>:
     a62:	a0 e2       	ldi	r26, 0x20	; 32
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	e7 e3       	ldi	r30, 0x37	; 55
     a68:	f5 e0       	ldi	r31, 0x05	; 5
     a6a:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__prologue_saves__>
     a6e:	69 83       	std	Y+1, r22	; 0x01
     a70:	7a 83       	std	Y+2, r23	; 0x02
     a72:	8b 83       	std	Y+3, r24	; 0x03
     a74:	9c 83       	std	Y+4, r25	; 0x04
     a76:	2d 83       	std	Y+5, r18	; 0x05
     a78:	3e 83       	std	Y+6, r19	; 0x06
     a7a:	4f 83       	std	Y+7, r20	; 0x07
     a7c:	58 87       	std	Y+8, r21	; 0x08
     a7e:	ce 01       	movw	r24, r28
     a80:	01 96       	adiw	r24, 0x01	; 1
     a82:	be 01       	movw	r22, r28
     a84:	67 5f       	subi	r22, 0xF7	; 247
     a86:	7f 4f       	sbci	r23, 0xFF	; 255
     a88:	0e 94 91 08 	call	0x1122	; 0x1122 <__unpack_f>
     a8c:	ce 01       	movw	r24, r28
     a8e:	05 96       	adiw	r24, 0x05	; 5
     a90:	be 01       	movw	r22, r28
     a92:	6f 5e       	subi	r22, 0xEF	; 239
     a94:	7f 4f       	sbci	r23, 0xFF	; 255
     a96:	0e 94 91 08 	call	0x1122	; 0x1122 <__unpack_f>
     a9a:	99 85       	ldd	r25, Y+9	; 0x09
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	88 f0       	brcs	.+34     	; 0xac2 <__mulsf3+0x60>
     aa0:	89 89       	ldd	r24, Y+17	; 0x11
     aa2:	82 30       	cpi	r24, 0x02	; 2
     aa4:	c8 f0       	brcs	.+50     	; 0xad8 <__mulsf3+0x76>
     aa6:	94 30       	cpi	r25, 0x04	; 4
     aa8:	19 f4       	brne	.+6      	; 0xab0 <__mulsf3+0x4e>
     aaa:	82 30       	cpi	r24, 0x02	; 2
     aac:	51 f4       	brne	.+20     	; 0xac2 <__mulsf3+0x60>
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <__mulsf3+0x56>
     ab0:	84 30       	cpi	r24, 0x04	; 4
     ab2:	29 f4       	brne	.+10     	; 0xabe <__mulsf3+0x5c>
     ab4:	92 30       	cpi	r25, 0x02	; 2
     ab6:	81 f4       	brne	.+32     	; 0xad8 <__mulsf3+0x76>
     ab8:	80 e6       	ldi	r24, 0x60	; 96
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	c6 c0       	rjmp	.+396    	; 0xc4a <__mulsf3+0x1e8>
     abe:	92 30       	cpi	r25, 0x02	; 2
     ac0:	49 f4       	brne	.+18     	; 0xad4 <__mulsf3+0x72>
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ac6:	8a 89       	ldd	r24, Y+18	; 0x12
     ac8:	98 13       	cpse	r25, r24
     aca:	21 e0       	ldi	r18, 0x01	; 1
     acc:	2a 87       	std	Y+10, r18	; 0x0a
     ace:	ce 01       	movw	r24, r28
     ad0:	09 96       	adiw	r24, 0x09	; 9
     ad2:	bb c0       	rjmp	.+374    	; 0xc4a <__mulsf3+0x1e8>
     ad4:	82 30       	cpi	r24, 0x02	; 2
     ad6:	49 f4       	brne	.+18     	; 0xaea <__mulsf3+0x88>
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	9a 85       	ldd	r25, Y+10	; 0x0a
     adc:	8a 89       	ldd	r24, Y+18	; 0x12
     ade:	98 13       	cpse	r25, r24
     ae0:	21 e0       	ldi	r18, 0x01	; 1
     ae2:	2a 8b       	std	Y+18, r18	; 0x12
     ae4:	ce 01       	movw	r24, r28
     ae6:	41 96       	adiw	r24, 0x11	; 17
     ae8:	b0 c0       	rjmp	.+352    	; 0xc4a <__mulsf3+0x1e8>
     aea:	2d 84       	ldd	r2, Y+13	; 0x0d
     aec:	3e 84       	ldd	r3, Y+14	; 0x0e
     aee:	4f 84       	ldd	r4, Y+15	; 0x0f
     af0:	58 88       	ldd	r5, Y+16	; 0x10
     af2:	6d 88       	ldd	r6, Y+21	; 0x15
     af4:	7e 88       	ldd	r7, Y+22	; 0x16
     af6:	8f 88       	ldd	r8, Y+23	; 0x17
     af8:	98 8c       	ldd	r9, Y+24	; 0x18
     afa:	ee 24       	eor	r14, r14
     afc:	ff 24       	eor	r15, r15
     afe:	87 01       	movw	r16, r14
     b00:	aa 24       	eor	r10, r10
     b02:	bb 24       	eor	r11, r11
     b04:	65 01       	movw	r12, r10
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	e0 e0       	ldi	r30, 0x00	; 0
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	c1 01       	movw	r24, r2
     b14:	81 70       	andi	r24, 0x01	; 1
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	89 2b       	or	r24, r25
     b1a:	e9 f0       	breq	.+58     	; 0xb56 <__mulsf3+0xf4>
     b1c:	e6 0c       	add	r14, r6
     b1e:	f7 1c       	adc	r15, r7
     b20:	08 1d       	adc	r16, r8
     b22:	19 1d       	adc	r17, r9
     b24:	9a 01       	movw	r18, r20
     b26:	ab 01       	movw	r20, r22
     b28:	2a 0d       	add	r18, r10
     b2a:	3b 1d       	adc	r19, r11
     b2c:	4c 1d       	adc	r20, r12
     b2e:	5d 1d       	adc	r21, r13
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	e6 14       	cp	r14, r6
     b3a:	f7 04       	cpc	r15, r7
     b3c:	08 05       	cpc	r16, r8
     b3e:	19 05       	cpc	r17, r9
     b40:	20 f4       	brcc	.+8      	; 0xb4a <__mulsf3+0xe8>
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	ba 01       	movw	r22, r20
     b4c:	a9 01       	movw	r20, r18
     b4e:	48 0f       	add	r20, r24
     b50:	59 1f       	adc	r21, r25
     b52:	6a 1f       	adc	r22, r26
     b54:	7b 1f       	adc	r23, r27
     b56:	aa 0c       	add	r10, r10
     b58:	bb 1c       	adc	r11, r11
     b5a:	cc 1c       	adc	r12, r12
     b5c:	dd 1c       	adc	r13, r13
     b5e:	97 fe       	sbrs	r9, 7
     b60:	08 c0       	rjmp	.+16     	; 0xb72 <__mulsf3+0x110>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	a8 2a       	or	r10, r24
     b6c:	b9 2a       	or	r11, r25
     b6e:	ca 2a       	or	r12, r26
     b70:	db 2a       	or	r13, r27
     b72:	31 96       	adiw	r30, 0x01	; 1
     b74:	e0 32       	cpi	r30, 0x20	; 32
     b76:	f1 05       	cpc	r31, r1
     b78:	49 f0       	breq	.+18     	; 0xb8c <__mulsf3+0x12a>
     b7a:	66 0c       	add	r6, r6
     b7c:	77 1c       	adc	r7, r7
     b7e:	88 1c       	adc	r8, r8
     b80:	99 1c       	adc	r9, r9
     b82:	56 94       	lsr	r5
     b84:	47 94       	ror	r4
     b86:	37 94       	ror	r3
     b88:	27 94       	ror	r2
     b8a:	c3 cf       	rjmp	.-122    	; 0xb12 <__mulsf3+0xb0>
     b8c:	fa 85       	ldd	r31, Y+10	; 0x0a
     b8e:	ea 89       	ldd	r30, Y+18	; 0x12
     b90:	2b 89       	ldd	r18, Y+19	; 0x13
     b92:	3c 89       	ldd	r19, Y+20	; 0x14
     b94:	8b 85       	ldd	r24, Y+11	; 0x0b
     b96:	9c 85       	ldd	r25, Y+12	; 0x0c
     b98:	28 0f       	add	r18, r24
     b9a:	39 1f       	adc	r19, r25
     b9c:	2e 5f       	subi	r18, 0xFE	; 254
     b9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ba0:	17 c0       	rjmp	.+46     	; 0xbd0 <__mulsf3+0x16e>
     ba2:	ca 01       	movw	r24, r20
     ba4:	81 70       	andi	r24, 0x01	; 1
     ba6:	90 70       	andi	r25, 0x00	; 0
     ba8:	89 2b       	or	r24, r25
     baa:	61 f0       	breq	.+24     	; 0xbc4 <__mulsf3+0x162>
     bac:	16 95       	lsr	r17
     bae:	07 95       	ror	r16
     bb0:	f7 94       	ror	r15
     bb2:	e7 94       	ror	r14
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	a0 e0       	ldi	r26, 0x00	; 0
     bba:	b0 e8       	ldi	r27, 0x80	; 128
     bbc:	e8 2a       	or	r14, r24
     bbe:	f9 2a       	or	r15, r25
     bc0:	0a 2b       	or	r16, r26
     bc2:	1b 2b       	or	r17, r27
     bc4:	76 95       	lsr	r23
     bc6:	67 95       	ror	r22
     bc8:	57 95       	ror	r21
     bca:	47 95       	ror	r20
     bcc:	2f 5f       	subi	r18, 0xFF	; 255
     bce:	3f 4f       	sbci	r19, 0xFF	; 255
     bd0:	77 fd       	sbrc	r23, 7
     bd2:	e7 cf       	rjmp	.-50     	; 0xba2 <__mulsf3+0x140>
     bd4:	0c c0       	rjmp	.+24     	; 0xbee <__mulsf3+0x18c>
     bd6:	44 0f       	add	r20, r20
     bd8:	55 1f       	adc	r21, r21
     bda:	66 1f       	adc	r22, r22
     bdc:	77 1f       	adc	r23, r23
     bde:	17 fd       	sbrc	r17, 7
     be0:	41 60       	ori	r20, 0x01	; 1
     be2:	ee 0c       	add	r14, r14
     be4:	ff 1c       	adc	r15, r15
     be6:	00 1f       	adc	r16, r16
     be8:	11 1f       	adc	r17, r17
     bea:	21 50       	subi	r18, 0x01	; 1
     bec:	30 40       	sbci	r19, 0x00	; 0
     bee:	40 30       	cpi	r20, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	59 07       	cpc	r21, r25
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	69 07       	cpc	r22, r25
     bf8:	90 e4       	ldi	r25, 0x40	; 64
     bfa:	79 07       	cpc	r23, r25
     bfc:	60 f3       	brcs	.-40     	; 0xbd6 <__mulsf3+0x174>
     bfe:	2b 8f       	std	Y+27, r18	; 0x1b
     c00:	3c 8f       	std	Y+28, r19	; 0x1c
     c02:	db 01       	movw	r26, r22
     c04:	ca 01       	movw	r24, r20
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	61 f4       	brne	.+24     	; 0xc30 <__mulsf3+0x1ce>
     c18:	47 fd       	sbrc	r20, 7
     c1a:	0a c0       	rjmp	.+20     	; 0xc30 <__mulsf3+0x1ce>
     c1c:	e1 14       	cp	r14, r1
     c1e:	f1 04       	cpc	r15, r1
     c20:	01 05       	cpc	r16, r1
     c22:	11 05       	cpc	r17, r1
     c24:	29 f0       	breq	.+10     	; 0xc30 <__mulsf3+0x1ce>
     c26:	40 5c       	subi	r20, 0xC0	; 192
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	6f 4f       	sbci	r22, 0xFF	; 255
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	40 78       	andi	r20, 0x80	; 128
     c30:	1a 8e       	std	Y+26, r1	; 0x1a
     c32:	fe 17       	cp	r31, r30
     c34:	11 f0       	breq	.+4      	; 0xc3a <__mulsf3+0x1d8>
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	8a 8f       	std	Y+26, r24	; 0x1a
     c3a:	4d 8f       	std	Y+29, r20	; 0x1d
     c3c:	5e 8f       	std	Y+30, r21	; 0x1e
     c3e:	6f 8f       	std	Y+31, r22	; 0x1f
     c40:	78 a3       	std	Y+32, r23	; 0x20
     c42:	83 e0       	ldi	r24, 0x03	; 3
     c44:	89 8f       	std	Y+25, r24	; 0x19
     c46:	ce 01       	movw	r24, r28
     c48:	49 96       	adiw	r24, 0x19	; 25
     c4a:	0e 94 bc 07 	call	0xf78	; 0xf78 <__pack_f>
     c4e:	a0 96       	adiw	r28, 0x20	; 32
     c50:	e2 e1       	ldi	r30, 0x12	; 18
     c52:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__epilogue_restores__>

00000c56 <__gtsf2>:
     c56:	a8 e1       	ldi	r26, 0x18	; 24
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e1 e3       	ldi	r30, 0x31	; 49
     c5c:	f6 e0       	ldi	r31, 0x06	; 6
     c5e:	0c 94 82 09 	jmp	0x1304	; 0x1304 <__prologue_saves__+0x18>
     c62:	69 83       	std	Y+1, r22	; 0x01
     c64:	7a 83       	std	Y+2, r23	; 0x02
     c66:	8b 83       	std	Y+3, r24	; 0x03
     c68:	9c 83       	std	Y+4, r25	; 0x04
     c6a:	2d 83       	std	Y+5, r18	; 0x05
     c6c:	3e 83       	std	Y+6, r19	; 0x06
     c6e:	4f 83       	std	Y+7, r20	; 0x07
     c70:	58 87       	std	Y+8, r21	; 0x08
     c72:	89 e0       	ldi	r24, 0x09	; 9
     c74:	e8 2e       	mov	r14, r24
     c76:	f1 2c       	mov	r15, r1
     c78:	ec 0e       	add	r14, r28
     c7a:	fd 1e       	adc	r15, r29
     c7c:	ce 01       	movw	r24, r28
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	b7 01       	movw	r22, r14
     c82:	0e 94 91 08 	call	0x1122	; 0x1122 <__unpack_f>
     c86:	8e 01       	movw	r16, r28
     c88:	0f 5e       	subi	r16, 0xEF	; 239
     c8a:	1f 4f       	sbci	r17, 0xFF	; 255
     c8c:	ce 01       	movw	r24, r28
     c8e:	05 96       	adiw	r24, 0x05	; 5
     c90:	b8 01       	movw	r22, r16
     c92:	0e 94 91 08 	call	0x1122	; 0x1122 <__unpack_f>
     c96:	89 85       	ldd	r24, Y+9	; 0x09
     c98:	82 30       	cpi	r24, 0x02	; 2
     c9a:	40 f0       	brcs	.+16     	; 0xcac <__gtsf2+0x56>
     c9c:	89 89       	ldd	r24, Y+17	; 0x11
     c9e:	82 30       	cpi	r24, 0x02	; 2
     ca0:	28 f0       	brcs	.+10     	; 0xcac <__gtsf2+0x56>
     ca2:	c7 01       	movw	r24, r14
     ca4:	b8 01       	movw	r22, r16
     ca6:	0e 94 09 09 	call	0x1212	; 0x1212 <__fpcmp_parts_f>
     caa:	01 c0       	rjmp	.+2      	; 0xcae <__gtsf2+0x58>
     cac:	8f ef       	ldi	r24, 0xFF	; 255
     cae:	68 96       	adiw	r28, 0x18	; 24
     cb0:	e6 e0       	ldi	r30, 0x06	; 6
     cb2:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__epilogue_restores__+0x18>

00000cb6 <__gesf2>:
     cb6:	a8 e1       	ldi	r26, 0x18	; 24
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e1 e6       	ldi	r30, 0x61	; 97
     cbc:	f6 e0       	ldi	r31, 0x06	; 6
     cbe:	0c 94 82 09 	jmp	0x1304	; 0x1304 <__prologue_saves__+0x18>
     cc2:	69 83       	std	Y+1, r22	; 0x01
     cc4:	7a 83       	std	Y+2, r23	; 0x02
     cc6:	8b 83       	std	Y+3, r24	; 0x03
     cc8:	9c 83       	std	Y+4, r25	; 0x04
     cca:	2d 83       	std	Y+5, r18	; 0x05
     ccc:	3e 83       	std	Y+6, r19	; 0x06
     cce:	4f 83       	std	Y+7, r20	; 0x07
     cd0:	58 87       	std	Y+8, r21	; 0x08
     cd2:	89 e0       	ldi	r24, 0x09	; 9
     cd4:	e8 2e       	mov	r14, r24
     cd6:	f1 2c       	mov	r15, r1
     cd8:	ec 0e       	add	r14, r28
     cda:	fd 1e       	adc	r15, r29
     cdc:	ce 01       	movw	r24, r28
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	b7 01       	movw	r22, r14
     ce2:	0e 94 91 08 	call	0x1122	; 0x1122 <__unpack_f>
     ce6:	8e 01       	movw	r16, r28
     ce8:	0f 5e       	subi	r16, 0xEF	; 239
     cea:	1f 4f       	sbci	r17, 0xFF	; 255
     cec:	ce 01       	movw	r24, r28
     cee:	05 96       	adiw	r24, 0x05	; 5
     cf0:	b8 01       	movw	r22, r16
     cf2:	0e 94 91 08 	call	0x1122	; 0x1122 <__unpack_f>
     cf6:	89 85       	ldd	r24, Y+9	; 0x09
     cf8:	82 30       	cpi	r24, 0x02	; 2
     cfa:	40 f0       	brcs	.+16     	; 0xd0c <__gesf2+0x56>
     cfc:	89 89       	ldd	r24, Y+17	; 0x11
     cfe:	82 30       	cpi	r24, 0x02	; 2
     d00:	28 f0       	brcs	.+10     	; 0xd0c <__gesf2+0x56>
     d02:	c7 01       	movw	r24, r14
     d04:	b8 01       	movw	r22, r16
     d06:	0e 94 09 09 	call	0x1212	; 0x1212 <__fpcmp_parts_f>
     d0a:	01 c0       	rjmp	.+2      	; 0xd0e <__gesf2+0x58>
     d0c:	8f ef       	ldi	r24, 0xFF	; 255
     d0e:	68 96       	adiw	r28, 0x18	; 24
     d10:	e6 e0       	ldi	r30, 0x06	; 6
     d12:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__epilogue_restores__+0x18>

00000d16 <__ltsf2>:
     d16:	a8 e1       	ldi	r26, 0x18	; 24
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e1 e9       	ldi	r30, 0x91	; 145
     d1c:	f6 e0       	ldi	r31, 0x06	; 6
     d1e:	0c 94 82 09 	jmp	0x1304	; 0x1304 <__prologue_saves__+0x18>
     d22:	69 83       	std	Y+1, r22	; 0x01
     d24:	7a 83       	std	Y+2, r23	; 0x02
     d26:	8b 83       	std	Y+3, r24	; 0x03
     d28:	9c 83       	std	Y+4, r25	; 0x04
     d2a:	2d 83       	std	Y+5, r18	; 0x05
     d2c:	3e 83       	std	Y+6, r19	; 0x06
     d2e:	4f 83       	std	Y+7, r20	; 0x07
     d30:	58 87       	std	Y+8, r21	; 0x08
     d32:	89 e0       	ldi	r24, 0x09	; 9
     d34:	e8 2e       	mov	r14, r24
     d36:	f1 2c       	mov	r15, r1
     d38:	ec 0e       	add	r14, r28
     d3a:	fd 1e       	adc	r15, r29
     d3c:	ce 01       	movw	r24, r28
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	b7 01       	movw	r22, r14
     d42:	0e 94 91 08 	call	0x1122	; 0x1122 <__unpack_f>
     d46:	8e 01       	movw	r16, r28
     d48:	0f 5e       	subi	r16, 0xEF	; 239
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
     d4c:	ce 01       	movw	r24, r28
     d4e:	05 96       	adiw	r24, 0x05	; 5
     d50:	b8 01       	movw	r22, r16
     d52:	0e 94 91 08 	call	0x1122	; 0x1122 <__unpack_f>
     d56:	89 85       	ldd	r24, Y+9	; 0x09
     d58:	82 30       	cpi	r24, 0x02	; 2
     d5a:	40 f0       	brcs	.+16     	; 0xd6c <__ltsf2+0x56>
     d5c:	89 89       	ldd	r24, Y+17	; 0x11
     d5e:	82 30       	cpi	r24, 0x02	; 2
     d60:	28 f0       	brcs	.+10     	; 0xd6c <__ltsf2+0x56>
     d62:	c7 01       	movw	r24, r14
     d64:	b8 01       	movw	r22, r16
     d66:	0e 94 09 09 	call	0x1212	; 0x1212 <__fpcmp_parts_f>
     d6a:	01 c0       	rjmp	.+2      	; 0xd6e <__ltsf2+0x58>
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	68 96       	adiw	r28, 0x18	; 24
     d70:	e6 e0       	ldi	r30, 0x06	; 6
     d72:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__epilogue_restores__+0x18>

00000d76 <__floatsisf>:
     d76:	a8 e0       	ldi	r26, 0x08	; 8
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e1 ec       	ldi	r30, 0xC1	; 193
     d7c:	f6 e0       	ldi	r31, 0x06	; 6
     d7e:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__prologue_saves__+0x12>
     d82:	9b 01       	movw	r18, r22
     d84:	ac 01       	movw	r20, r24
     d86:	83 e0       	ldi	r24, 0x03	; 3
     d88:	89 83       	std	Y+1, r24	; 0x01
     d8a:	da 01       	movw	r26, r20
     d8c:	c9 01       	movw	r24, r18
     d8e:	88 27       	eor	r24, r24
     d90:	b7 fd       	sbrc	r27, 7
     d92:	83 95       	inc	r24
     d94:	99 27       	eor	r25, r25
     d96:	aa 27       	eor	r26, r26
     d98:	bb 27       	eor	r27, r27
     d9a:	b8 2e       	mov	r11, r24
     d9c:	21 15       	cp	r18, r1
     d9e:	31 05       	cpc	r19, r1
     da0:	41 05       	cpc	r20, r1
     da2:	51 05       	cpc	r21, r1
     da4:	19 f4       	brne	.+6      	; 0xdac <__floatsisf+0x36>
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	3a c0       	rjmp	.+116    	; 0xe20 <__floatsisf+0xaa>
     dac:	88 23       	and	r24, r24
     dae:	a9 f0       	breq	.+42     	; 0xdda <__floatsisf+0x64>
     db0:	20 30       	cpi	r18, 0x00	; 0
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	38 07       	cpc	r19, r24
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	48 07       	cpc	r20, r24
     dba:	80 e8       	ldi	r24, 0x80	; 128
     dbc:	58 07       	cpc	r21, r24
     dbe:	29 f4       	brne	.+10     	; 0xdca <__floatsisf+0x54>
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	9f ec       	ldi	r25, 0xCF	; 207
     dc8:	30 c0       	rjmp	.+96     	; 0xe2a <__floatsisf+0xb4>
     dca:	ee 24       	eor	r14, r14
     dcc:	ff 24       	eor	r15, r15
     dce:	87 01       	movw	r16, r14
     dd0:	e2 1a       	sub	r14, r18
     dd2:	f3 0a       	sbc	r15, r19
     dd4:	04 0b       	sbc	r16, r20
     dd6:	15 0b       	sbc	r17, r21
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <__floatsisf+0x68>
     dda:	79 01       	movw	r14, r18
     ddc:	8a 01       	movw	r16, r20
     dde:	8e e1       	ldi	r24, 0x1E	; 30
     de0:	c8 2e       	mov	r12, r24
     de2:	d1 2c       	mov	r13, r1
     de4:	dc 82       	std	Y+4, r13	; 0x04
     de6:	cb 82       	std	Y+3, r12	; 0x03
     de8:	ed 82       	std	Y+5, r14	; 0x05
     dea:	fe 82       	std	Y+6, r15	; 0x06
     dec:	0f 83       	std	Y+7, r16	; 0x07
     dee:	18 87       	std	Y+8, r17	; 0x08
     df0:	c8 01       	movw	r24, r16
     df2:	b7 01       	movw	r22, r14
     df4:	0e 94 6d 07 	call	0xeda	; 0xeda <__clzsi2>
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	18 16       	cp	r1, r24
     dfc:	19 06       	cpc	r1, r25
     dfe:	84 f4       	brge	.+32     	; 0xe20 <__floatsisf+0xaa>
     e00:	08 2e       	mov	r0, r24
     e02:	04 c0       	rjmp	.+8      	; 0xe0c <__floatsisf+0x96>
     e04:	ee 0c       	add	r14, r14
     e06:	ff 1c       	adc	r15, r15
     e08:	00 1f       	adc	r16, r16
     e0a:	11 1f       	adc	r17, r17
     e0c:	0a 94       	dec	r0
     e0e:	d2 f7       	brpl	.-12     	; 0xe04 <__floatsisf+0x8e>
     e10:	ed 82       	std	Y+5, r14	; 0x05
     e12:	fe 82       	std	Y+6, r15	; 0x06
     e14:	0f 83       	std	Y+7, r16	; 0x07
     e16:	18 87       	std	Y+8, r17	; 0x08
     e18:	c8 1a       	sub	r12, r24
     e1a:	d9 0a       	sbc	r13, r25
     e1c:	dc 82       	std	Y+4, r13	; 0x04
     e1e:	cb 82       	std	Y+3, r12	; 0x03
     e20:	ba 82       	std	Y+2, r11	; 0x02
     e22:	ce 01       	movw	r24, r28
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	0e 94 bc 07 	call	0xf78	; 0xf78 <__pack_f>
     e2a:	28 96       	adiw	r28, 0x08	; 8
     e2c:	e9 e0       	ldi	r30, 0x09	; 9
     e2e:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__epilogue_restores__+0x12>

00000e32 <__fixsfsi>:
     e32:	ac e0       	ldi	r26, 0x0C	; 12
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	ef e1       	ldi	r30, 0x1F	; 31
     e38:	f7 e0       	ldi	r31, 0x07	; 7
     e3a:	0c 94 86 09 	jmp	0x130c	; 0x130c <__prologue_saves__+0x20>
     e3e:	69 83       	std	Y+1, r22	; 0x01
     e40:	7a 83       	std	Y+2, r23	; 0x02
     e42:	8b 83       	std	Y+3, r24	; 0x03
     e44:	9c 83       	std	Y+4, r25	; 0x04
     e46:	ce 01       	movw	r24, r28
     e48:	01 96       	adiw	r24, 0x01	; 1
     e4a:	be 01       	movw	r22, r28
     e4c:	6b 5f       	subi	r22, 0xFB	; 251
     e4e:	7f 4f       	sbci	r23, 0xFF	; 255
     e50:	0e 94 91 08 	call	0x1122	; 0x1122 <__unpack_f>
     e54:	8d 81       	ldd	r24, Y+5	; 0x05
     e56:	82 30       	cpi	r24, 0x02	; 2
     e58:	61 f1       	breq	.+88     	; 0xeb2 <__fixsfsi+0x80>
     e5a:	82 30       	cpi	r24, 0x02	; 2
     e5c:	50 f1       	brcs	.+84     	; 0xeb2 <__fixsfsi+0x80>
     e5e:	84 30       	cpi	r24, 0x04	; 4
     e60:	21 f4       	brne	.+8      	; 0xe6a <__fixsfsi+0x38>
     e62:	8e 81       	ldd	r24, Y+6	; 0x06
     e64:	88 23       	and	r24, r24
     e66:	51 f1       	breq	.+84     	; 0xebc <__fixsfsi+0x8a>
     e68:	2e c0       	rjmp	.+92     	; 0xec6 <__fixsfsi+0x94>
     e6a:	2f 81       	ldd	r18, Y+7	; 0x07
     e6c:	38 85       	ldd	r19, Y+8	; 0x08
     e6e:	37 fd       	sbrc	r19, 7
     e70:	20 c0       	rjmp	.+64     	; 0xeb2 <__fixsfsi+0x80>
     e72:	6e 81       	ldd	r22, Y+6	; 0x06
     e74:	2f 31       	cpi	r18, 0x1F	; 31
     e76:	31 05       	cpc	r19, r1
     e78:	1c f0       	brlt	.+6      	; 0xe80 <__fixsfsi+0x4e>
     e7a:	66 23       	and	r22, r22
     e7c:	f9 f0       	breq	.+62     	; 0xebc <__fixsfsi+0x8a>
     e7e:	23 c0       	rjmp	.+70     	; 0xec6 <__fixsfsi+0x94>
     e80:	8e e1       	ldi	r24, 0x1E	; 30
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	82 1b       	sub	r24, r18
     e86:	93 0b       	sbc	r25, r19
     e88:	29 85       	ldd	r18, Y+9	; 0x09
     e8a:	3a 85       	ldd	r19, Y+10	; 0x0a
     e8c:	4b 85       	ldd	r20, Y+11	; 0x0b
     e8e:	5c 85       	ldd	r21, Y+12	; 0x0c
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__fixsfsi+0x68>
     e92:	56 95       	lsr	r21
     e94:	47 95       	ror	r20
     e96:	37 95       	ror	r19
     e98:	27 95       	ror	r18
     e9a:	8a 95       	dec	r24
     e9c:	d2 f7       	brpl	.-12     	; 0xe92 <__fixsfsi+0x60>
     e9e:	66 23       	and	r22, r22
     ea0:	b1 f0       	breq	.+44     	; 0xece <__fixsfsi+0x9c>
     ea2:	50 95       	com	r21
     ea4:	40 95       	com	r20
     ea6:	30 95       	com	r19
     ea8:	21 95       	neg	r18
     eaa:	3f 4f       	sbci	r19, 0xFF	; 255
     eac:	4f 4f       	sbci	r20, 0xFF	; 255
     eae:	5f 4f       	sbci	r21, 0xFF	; 255
     eb0:	0e c0       	rjmp	.+28     	; 0xece <__fixsfsi+0x9c>
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	09 c0       	rjmp	.+18     	; 0xece <__fixsfsi+0x9c>
     ebc:	2f ef       	ldi	r18, 0xFF	; 255
     ebe:	3f ef       	ldi	r19, 0xFF	; 255
     ec0:	4f ef       	ldi	r20, 0xFF	; 255
     ec2:	5f e7       	ldi	r21, 0x7F	; 127
     ec4:	04 c0       	rjmp	.+8      	; 0xece <__fixsfsi+0x9c>
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	50 e8       	ldi	r21, 0x80	; 128
     ece:	b9 01       	movw	r22, r18
     ed0:	ca 01       	movw	r24, r20
     ed2:	2c 96       	adiw	r28, 0x0c	; 12
     ed4:	e2 e0       	ldi	r30, 0x02	; 2
     ed6:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__epilogue_restores__+0x20>

00000eda <__clzsi2>:
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	7b 01       	movw	r14, r22
     ee4:	8c 01       	movw	r16, r24
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	e8 16       	cp	r14, r24
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	f8 06       	cpc	r15, r24
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	08 07       	cpc	r16, r24
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	18 07       	cpc	r17, r24
     ef6:	88 f4       	brcc	.+34     	; 0xf1a <__clzsi2+0x40>
     ef8:	8f ef       	ldi	r24, 0xFF	; 255
     efa:	e8 16       	cp	r14, r24
     efc:	f1 04       	cpc	r15, r1
     efe:	01 05       	cpc	r16, r1
     f00:	11 05       	cpc	r17, r1
     f02:	31 f0       	breq	.+12     	; 0xf10 <__clzsi2+0x36>
     f04:	28 f0       	brcs	.+10     	; 0xf10 <__clzsi2+0x36>
     f06:	88 e0       	ldi	r24, 0x08	; 8
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	a0 e0       	ldi	r26, 0x00	; 0
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	17 c0       	rjmp	.+46     	; 0xf3e <__clzsi2+0x64>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	a0 e0       	ldi	r26, 0x00	; 0
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	12 c0       	rjmp	.+36     	; 0xf3e <__clzsi2+0x64>
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	e8 16       	cp	r14, r24
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	f8 06       	cpc	r15, r24
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	08 07       	cpc	r16, r24
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	18 07       	cpc	r17, r24
     f2a:	28 f0       	brcs	.+10     	; 0xf36 <__clzsi2+0x5c>
     f2c:	88 e1       	ldi	r24, 0x18	; 24
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	a0 e0       	ldi	r26, 0x00	; 0
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	04 c0       	rjmp	.+8      	; 0xf3e <__clzsi2+0x64>
     f36:	80 e1       	ldi	r24, 0x10	; 16
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a0 e0       	ldi	r26, 0x00	; 0
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	20 e2       	ldi	r18, 0x20	; 32
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	28 1b       	sub	r18, r24
     f48:	39 0b       	sbc	r19, r25
     f4a:	4a 0b       	sbc	r20, r26
     f4c:	5b 0b       	sbc	r21, r27
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <__clzsi2+0x7e>
     f50:	16 95       	lsr	r17
     f52:	07 95       	ror	r16
     f54:	f7 94       	ror	r15
     f56:	e7 94       	ror	r14
     f58:	8a 95       	dec	r24
     f5a:	d2 f7       	brpl	.-12     	; 0xf50 <__clzsi2+0x76>
     f5c:	f7 01       	movw	r30, r14
     f5e:	e8 59       	subi	r30, 0x98	; 152
     f60:	ff 4f       	sbci	r31, 0xFF	; 255
     f62:	80 81       	ld	r24, Z
     f64:	28 1b       	sub	r18, r24
     f66:	31 09       	sbc	r19, r1
     f68:	41 09       	sbc	r20, r1
     f6a:	51 09       	sbc	r21, r1
     f6c:	c9 01       	movw	r24, r18
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	08 95       	ret

00000f78 <__pack_f>:
     f78:	df 92       	push	r13
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	fc 01       	movw	r30, r24
     f84:	e4 80       	ldd	r14, Z+4	; 0x04
     f86:	f5 80       	ldd	r15, Z+5	; 0x05
     f88:	06 81       	ldd	r16, Z+6	; 0x06
     f8a:	17 81       	ldd	r17, Z+7	; 0x07
     f8c:	d1 80       	ldd	r13, Z+1	; 0x01
     f8e:	80 81       	ld	r24, Z
     f90:	82 30       	cpi	r24, 0x02	; 2
     f92:	48 f4       	brcc	.+18     	; 0xfa6 <__pack_f+0x2e>
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a0 e1       	ldi	r26, 0x10	; 16
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e8 2a       	or	r14, r24
     f9e:	f9 2a       	or	r15, r25
     fa0:	0a 2b       	or	r16, r26
     fa2:	1b 2b       	or	r17, r27
     fa4:	a5 c0       	rjmp	.+330    	; 0x10f0 <__pack_f+0x178>
     fa6:	84 30       	cpi	r24, 0x04	; 4
     fa8:	09 f4       	brne	.+2      	; 0xfac <__pack_f+0x34>
     faa:	9f c0       	rjmp	.+318    	; 0x10ea <__pack_f+0x172>
     fac:	82 30       	cpi	r24, 0x02	; 2
     fae:	21 f4       	brne	.+8      	; 0xfb8 <__pack_f+0x40>
     fb0:	ee 24       	eor	r14, r14
     fb2:	ff 24       	eor	r15, r15
     fb4:	87 01       	movw	r16, r14
     fb6:	05 c0       	rjmp	.+10     	; 0xfc2 <__pack_f+0x4a>
     fb8:	e1 14       	cp	r14, r1
     fba:	f1 04       	cpc	r15, r1
     fbc:	01 05       	cpc	r16, r1
     fbe:	11 05       	cpc	r17, r1
     fc0:	19 f4       	brne	.+6      	; 0xfc8 <__pack_f+0x50>
     fc2:	e0 e0       	ldi	r30, 0x00	; 0
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	96 c0       	rjmp	.+300    	; 0x10f4 <__pack_f+0x17c>
     fc8:	62 81       	ldd	r22, Z+2	; 0x02
     fca:	73 81       	ldd	r23, Z+3	; 0x03
     fcc:	9f ef       	ldi	r25, 0xFF	; 255
     fce:	62 38       	cpi	r22, 0x82	; 130
     fd0:	79 07       	cpc	r23, r25
     fd2:	0c f0       	brlt	.+2      	; 0xfd6 <__pack_f+0x5e>
     fd4:	5b c0       	rjmp	.+182    	; 0x108c <__pack_f+0x114>
     fd6:	22 e8       	ldi	r18, 0x82	; 130
     fd8:	3f ef       	ldi	r19, 0xFF	; 255
     fda:	26 1b       	sub	r18, r22
     fdc:	37 0b       	sbc	r19, r23
     fde:	2a 31       	cpi	r18, 0x1A	; 26
     fe0:	31 05       	cpc	r19, r1
     fe2:	2c f0       	brlt	.+10     	; 0xfee <__pack_f+0x76>
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e0       	ldi	r20, 0x00	; 0
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	2a c0       	rjmp	.+84     	; 0x1042 <__pack_f+0xca>
     fee:	b8 01       	movw	r22, r16
     ff0:	a7 01       	movw	r20, r14
     ff2:	02 2e       	mov	r0, r18
     ff4:	04 c0       	rjmp	.+8      	; 0xffe <__pack_f+0x86>
     ff6:	76 95       	lsr	r23
     ff8:	67 95       	ror	r22
     ffa:	57 95       	ror	r21
     ffc:	47 95       	ror	r20
     ffe:	0a 94       	dec	r0
    1000:	d2 f7       	brpl	.-12     	; 0xff6 <__pack_f+0x7e>
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	a0 e0       	ldi	r26, 0x00	; 0
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	04 c0       	rjmp	.+8      	; 0x1014 <__pack_f+0x9c>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	aa 1f       	adc	r26, r26
    1012:	bb 1f       	adc	r27, r27
    1014:	2a 95       	dec	r18
    1016:	d2 f7       	brpl	.-12     	; 0x100c <__pack_f+0x94>
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	a1 09       	sbc	r26, r1
    101c:	b1 09       	sbc	r27, r1
    101e:	8e 21       	and	r24, r14
    1020:	9f 21       	and	r25, r15
    1022:	a0 23       	and	r26, r16
    1024:	b1 23       	and	r27, r17
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	a1 05       	cpc	r26, r1
    102a:	b1 05       	cpc	r27, r1
    102c:	21 f0       	breq	.+8      	; 0x1036 <__pack_f+0xbe>
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	a0 e0       	ldi	r26, 0x00	; 0
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	9a 01       	movw	r18, r20
    1038:	ab 01       	movw	r20, r22
    103a:	28 2b       	or	r18, r24
    103c:	39 2b       	or	r19, r25
    103e:	4a 2b       	or	r20, r26
    1040:	5b 2b       	or	r21, r27
    1042:	da 01       	movw	r26, r20
    1044:	c9 01       	movw	r24, r18
    1046:	8f 77       	andi	r24, 0x7F	; 127
    1048:	90 70       	andi	r25, 0x00	; 0
    104a:	a0 70       	andi	r26, 0x00	; 0
    104c:	b0 70       	andi	r27, 0x00	; 0
    104e:	80 34       	cpi	r24, 0x40	; 64
    1050:	91 05       	cpc	r25, r1
    1052:	a1 05       	cpc	r26, r1
    1054:	b1 05       	cpc	r27, r1
    1056:	39 f4       	brne	.+14     	; 0x1066 <__pack_f+0xee>
    1058:	27 ff       	sbrs	r18, 7
    105a:	09 c0       	rjmp	.+18     	; 0x106e <__pack_f+0xf6>
    105c:	20 5c       	subi	r18, 0xC0	; 192
    105e:	3f 4f       	sbci	r19, 0xFF	; 255
    1060:	4f 4f       	sbci	r20, 0xFF	; 255
    1062:	5f 4f       	sbci	r21, 0xFF	; 255
    1064:	04 c0       	rjmp	.+8      	; 0x106e <__pack_f+0xf6>
    1066:	21 5c       	subi	r18, 0xC1	; 193
    1068:	3f 4f       	sbci	r19, 0xFF	; 255
    106a:	4f 4f       	sbci	r20, 0xFF	; 255
    106c:	5f 4f       	sbci	r21, 0xFF	; 255
    106e:	e0 e0       	ldi	r30, 0x00	; 0
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	20 30       	cpi	r18, 0x00	; 0
    1074:	a0 e0       	ldi	r26, 0x00	; 0
    1076:	3a 07       	cpc	r19, r26
    1078:	a0 e0       	ldi	r26, 0x00	; 0
    107a:	4a 07       	cpc	r20, r26
    107c:	a0 e4       	ldi	r26, 0x40	; 64
    107e:	5a 07       	cpc	r21, r26
    1080:	10 f0       	brcs	.+4      	; 0x1086 <__pack_f+0x10e>
    1082:	e1 e0       	ldi	r30, 0x01	; 1
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	79 01       	movw	r14, r18
    1088:	8a 01       	movw	r16, r20
    108a:	27 c0       	rjmp	.+78     	; 0x10da <__pack_f+0x162>
    108c:	60 38       	cpi	r22, 0x80	; 128
    108e:	71 05       	cpc	r23, r1
    1090:	64 f5       	brge	.+88     	; 0x10ea <__pack_f+0x172>
    1092:	fb 01       	movw	r30, r22
    1094:	e1 58       	subi	r30, 0x81	; 129
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	d8 01       	movw	r26, r16
    109a:	c7 01       	movw	r24, r14
    109c:	8f 77       	andi	r24, 0x7F	; 127
    109e:	90 70       	andi	r25, 0x00	; 0
    10a0:	a0 70       	andi	r26, 0x00	; 0
    10a2:	b0 70       	andi	r27, 0x00	; 0
    10a4:	80 34       	cpi	r24, 0x40	; 64
    10a6:	91 05       	cpc	r25, r1
    10a8:	a1 05       	cpc	r26, r1
    10aa:	b1 05       	cpc	r27, r1
    10ac:	39 f4       	brne	.+14     	; 0x10bc <__pack_f+0x144>
    10ae:	e7 fe       	sbrs	r14, 7
    10b0:	0d c0       	rjmp	.+26     	; 0x10cc <__pack_f+0x154>
    10b2:	80 e4       	ldi	r24, 0x40	; 64
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	a0 e0       	ldi	r26, 0x00	; 0
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	04 c0       	rjmp	.+8      	; 0x10c4 <__pack_f+0x14c>
    10bc:	8f e3       	ldi	r24, 0x3F	; 63
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	a0 e0       	ldi	r26, 0x00	; 0
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e8 0e       	add	r14, r24
    10c6:	f9 1e       	adc	r15, r25
    10c8:	0a 1f       	adc	r16, r26
    10ca:	1b 1f       	adc	r17, r27
    10cc:	17 ff       	sbrs	r17, 7
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <__pack_f+0x162>
    10d0:	16 95       	lsr	r17
    10d2:	07 95       	ror	r16
    10d4:	f7 94       	ror	r15
    10d6:	e7 94       	ror	r14
    10d8:	31 96       	adiw	r30, 0x01	; 1
    10da:	87 e0       	ldi	r24, 0x07	; 7
    10dc:	16 95       	lsr	r17
    10de:	07 95       	ror	r16
    10e0:	f7 94       	ror	r15
    10e2:	e7 94       	ror	r14
    10e4:	8a 95       	dec	r24
    10e6:	d1 f7       	brne	.-12     	; 0x10dc <__pack_f+0x164>
    10e8:	05 c0       	rjmp	.+10     	; 0x10f4 <__pack_f+0x17c>
    10ea:	ee 24       	eor	r14, r14
    10ec:	ff 24       	eor	r15, r15
    10ee:	87 01       	movw	r16, r14
    10f0:	ef ef       	ldi	r30, 0xFF	; 255
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	6e 2f       	mov	r22, r30
    10f6:	67 95       	ror	r22
    10f8:	66 27       	eor	r22, r22
    10fa:	67 95       	ror	r22
    10fc:	90 2f       	mov	r25, r16
    10fe:	9f 77       	andi	r25, 0x7F	; 127
    1100:	d7 94       	ror	r13
    1102:	dd 24       	eor	r13, r13
    1104:	d7 94       	ror	r13
    1106:	8e 2f       	mov	r24, r30
    1108:	86 95       	lsr	r24
    110a:	49 2f       	mov	r20, r25
    110c:	46 2b       	or	r20, r22
    110e:	58 2f       	mov	r21, r24
    1110:	5d 29       	or	r21, r13
    1112:	b7 01       	movw	r22, r14
    1114:	ca 01       	movw	r24, r20
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	ff 90       	pop	r15
    111c:	ef 90       	pop	r14
    111e:	df 90       	pop	r13
    1120:	08 95       	ret

00001122 <__unpack_f>:
    1122:	fc 01       	movw	r30, r24
    1124:	db 01       	movw	r26, r22
    1126:	40 81       	ld	r20, Z
    1128:	51 81       	ldd	r21, Z+1	; 0x01
    112a:	22 81       	ldd	r18, Z+2	; 0x02
    112c:	62 2f       	mov	r22, r18
    112e:	6f 77       	andi	r22, 0x7F	; 127
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	22 1f       	adc	r18, r18
    1134:	22 27       	eor	r18, r18
    1136:	22 1f       	adc	r18, r18
    1138:	93 81       	ldd	r25, Z+3	; 0x03
    113a:	89 2f       	mov	r24, r25
    113c:	88 0f       	add	r24, r24
    113e:	82 2b       	or	r24, r18
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	99 1f       	adc	r25, r25
    1146:	99 27       	eor	r25, r25
    1148:	99 1f       	adc	r25, r25
    114a:	11 96       	adiw	r26, 0x01	; 1
    114c:	9c 93       	st	X, r25
    114e:	11 97       	sbiw	r26, 0x01	; 1
    1150:	21 15       	cp	r18, r1
    1152:	31 05       	cpc	r19, r1
    1154:	a9 f5       	brne	.+106    	; 0x11c0 <__unpack_f+0x9e>
    1156:	41 15       	cp	r20, r1
    1158:	51 05       	cpc	r21, r1
    115a:	61 05       	cpc	r22, r1
    115c:	71 05       	cpc	r23, r1
    115e:	11 f4       	brne	.+4      	; 0x1164 <__unpack_f+0x42>
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	37 c0       	rjmp	.+110    	; 0x11d2 <__unpack_f+0xb0>
    1164:	82 e8       	ldi	r24, 0x82	; 130
    1166:	9f ef       	ldi	r25, 0xFF	; 255
    1168:	13 96       	adiw	r26, 0x03	; 3
    116a:	9c 93       	st	X, r25
    116c:	8e 93       	st	-X, r24
    116e:	12 97       	sbiw	r26, 0x02	; 2
    1170:	9a 01       	movw	r18, r20
    1172:	ab 01       	movw	r20, r22
    1174:	67 e0       	ldi	r22, 0x07	; 7
    1176:	22 0f       	add	r18, r18
    1178:	33 1f       	adc	r19, r19
    117a:	44 1f       	adc	r20, r20
    117c:	55 1f       	adc	r21, r21
    117e:	6a 95       	dec	r22
    1180:	d1 f7       	brne	.-12     	; 0x1176 <__unpack_f+0x54>
    1182:	83 e0       	ldi	r24, 0x03	; 3
    1184:	8c 93       	st	X, r24
    1186:	0d c0       	rjmp	.+26     	; 0x11a2 <__unpack_f+0x80>
    1188:	22 0f       	add	r18, r18
    118a:	33 1f       	adc	r19, r19
    118c:	44 1f       	adc	r20, r20
    118e:	55 1f       	adc	r21, r21
    1190:	12 96       	adiw	r26, 0x02	; 2
    1192:	8d 91       	ld	r24, X+
    1194:	9c 91       	ld	r25, X
    1196:	13 97       	sbiw	r26, 0x03	; 3
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	13 96       	adiw	r26, 0x03	; 3
    119c:	9c 93       	st	X, r25
    119e:	8e 93       	st	-X, r24
    11a0:	12 97       	sbiw	r26, 0x02	; 2
    11a2:	20 30       	cpi	r18, 0x00	; 0
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	38 07       	cpc	r19, r24
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	48 07       	cpc	r20, r24
    11ac:	80 e4       	ldi	r24, 0x40	; 64
    11ae:	58 07       	cpc	r21, r24
    11b0:	58 f3       	brcs	.-42     	; 0x1188 <__unpack_f+0x66>
    11b2:	14 96       	adiw	r26, 0x04	; 4
    11b4:	2d 93       	st	X+, r18
    11b6:	3d 93       	st	X+, r19
    11b8:	4d 93       	st	X+, r20
    11ba:	5c 93       	st	X, r21
    11bc:	17 97       	sbiw	r26, 0x07	; 7
    11be:	08 95       	ret
    11c0:	2f 3f       	cpi	r18, 0xFF	; 255
    11c2:	31 05       	cpc	r19, r1
    11c4:	79 f4       	brne	.+30     	; 0x11e4 <__unpack_f+0xc2>
    11c6:	41 15       	cp	r20, r1
    11c8:	51 05       	cpc	r21, r1
    11ca:	61 05       	cpc	r22, r1
    11cc:	71 05       	cpc	r23, r1
    11ce:	19 f4       	brne	.+6      	; 0x11d6 <__unpack_f+0xb4>
    11d0:	84 e0       	ldi	r24, 0x04	; 4
    11d2:	8c 93       	st	X, r24
    11d4:	08 95       	ret
    11d6:	64 ff       	sbrs	r22, 4
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <__unpack_f+0xbe>
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	8c 93       	st	X, r24
    11de:	12 c0       	rjmp	.+36     	; 0x1204 <__unpack_f+0xe2>
    11e0:	1c 92       	st	X, r1
    11e2:	10 c0       	rjmp	.+32     	; 0x1204 <__unpack_f+0xe2>
    11e4:	2f 57       	subi	r18, 0x7F	; 127
    11e6:	30 40       	sbci	r19, 0x00	; 0
    11e8:	13 96       	adiw	r26, 0x03	; 3
    11ea:	3c 93       	st	X, r19
    11ec:	2e 93       	st	-X, r18
    11ee:	12 97       	sbiw	r26, 0x02	; 2
    11f0:	83 e0       	ldi	r24, 0x03	; 3
    11f2:	8c 93       	st	X, r24
    11f4:	87 e0       	ldi	r24, 0x07	; 7
    11f6:	44 0f       	add	r20, r20
    11f8:	55 1f       	adc	r21, r21
    11fa:	66 1f       	adc	r22, r22
    11fc:	77 1f       	adc	r23, r23
    11fe:	8a 95       	dec	r24
    1200:	d1 f7       	brne	.-12     	; 0x11f6 <__unpack_f+0xd4>
    1202:	70 64       	ori	r23, 0x40	; 64
    1204:	14 96       	adiw	r26, 0x04	; 4
    1206:	4d 93       	st	X+, r20
    1208:	5d 93       	st	X+, r21
    120a:	6d 93       	st	X+, r22
    120c:	7c 93       	st	X, r23
    120e:	17 97       	sbiw	r26, 0x07	; 7
    1210:	08 95       	ret

00001212 <__fpcmp_parts_f>:
    1212:	1f 93       	push	r17
    1214:	dc 01       	movw	r26, r24
    1216:	fb 01       	movw	r30, r22
    1218:	9c 91       	ld	r25, X
    121a:	92 30       	cpi	r25, 0x02	; 2
    121c:	08 f4       	brcc	.+2      	; 0x1220 <__fpcmp_parts_f+0xe>
    121e:	47 c0       	rjmp	.+142    	; 0x12ae <__fpcmp_parts_f+0x9c>
    1220:	80 81       	ld	r24, Z
    1222:	82 30       	cpi	r24, 0x02	; 2
    1224:	08 f4       	brcc	.+2      	; 0x1228 <__fpcmp_parts_f+0x16>
    1226:	43 c0       	rjmp	.+134    	; 0x12ae <__fpcmp_parts_f+0x9c>
    1228:	94 30       	cpi	r25, 0x04	; 4
    122a:	51 f4       	brne	.+20     	; 0x1240 <__fpcmp_parts_f+0x2e>
    122c:	11 96       	adiw	r26, 0x01	; 1
    122e:	1c 91       	ld	r17, X
    1230:	84 30       	cpi	r24, 0x04	; 4
    1232:	99 f5       	brne	.+102    	; 0x129a <__fpcmp_parts_f+0x88>
    1234:	81 81       	ldd	r24, Z+1	; 0x01
    1236:	68 2f       	mov	r22, r24
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	61 1b       	sub	r22, r17
    123c:	71 09       	sbc	r23, r1
    123e:	3f c0       	rjmp	.+126    	; 0x12be <__fpcmp_parts_f+0xac>
    1240:	84 30       	cpi	r24, 0x04	; 4
    1242:	21 f0       	breq	.+8      	; 0x124c <__fpcmp_parts_f+0x3a>
    1244:	92 30       	cpi	r25, 0x02	; 2
    1246:	31 f4       	brne	.+12     	; 0x1254 <__fpcmp_parts_f+0x42>
    1248:	82 30       	cpi	r24, 0x02	; 2
    124a:	b9 f1       	breq	.+110    	; 0x12ba <__fpcmp_parts_f+0xa8>
    124c:	81 81       	ldd	r24, Z+1	; 0x01
    124e:	88 23       	and	r24, r24
    1250:	89 f1       	breq	.+98     	; 0x12b4 <__fpcmp_parts_f+0xa2>
    1252:	2d c0       	rjmp	.+90     	; 0x12ae <__fpcmp_parts_f+0x9c>
    1254:	11 96       	adiw	r26, 0x01	; 1
    1256:	1c 91       	ld	r17, X
    1258:	11 97       	sbiw	r26, 0x01	; 1
    125a:	82 30       	cpi	r24, 0x02	; 2
    125c:	f1 f0       	breq	.+60     	; 0x129a <__fpcmp_parts_f+0x88>
    125e:	81 81       	ldd	r24, Z+1	; 0x01
    1260:	18 17       	cp	r17, r24
    1262:	d9 f4       	brne	.+54     	; 0x129a <__fpcmp_parts_f+0x88>
    1264:	12 96       	adiw	r26, 0x02	; 2
    1266:	2d 91       	ld	r18, X+
    1268:	3c 91       	ld	r19, X
    126a:	13 97       	sbiw	r26, 0x03	; 3
    126c:	82 81       	ldd	r24, Z+2	; 0x02
    126e:	93 81       	ldd	r25, Z+3	; 0x03
    1270:	82 17       	cp	r24, r18
    1272:	93 07       	cpc	r25, r19
    1274:	94 f0       	brlt	.+36     	; 0x129a <__fpcmp_parts_f+0x88>
    1276:	28 17       	cp	r18, r24
    1278:	39 07       	cpc	r19, r25
    127a:	bc f0       	brlt	.+46     	; 0x12aa <__fpcmp_parts_f+0x98>
    127c:	14 96       	adiw	r26, 0x04	; 4
    127e:	8d 91       	ld	r24, X+
    1280:	9d 91       	ld	r25, X+
    1282:	0d 90       	ld	r0, X+
    1284:	bc 91       	ld	r27, X
    1286:	a0 2d       	mov	r26, r0
    1288:	24 81       	ldd	r18, Z+4	; 0x04
    128a:	35 81       	ldd	r19, Z+5	; 0x05
    128c:	46 81       	ldd	r20, Z+6	; 0x06
    128e:	57 81       	ldd	r21, Z+7	; 0x07
    1290:	28 17       	cp	r18, r24
    1292:	39 07       	cpc	r19, r25
    1294:	4a 07       	cpc	r20, r26
    1296:	5b 07       	cpc	r21, r27
    1298:	18 f4       	brcc	.+6      	; 0x12a0 <__fpcmp_parts_f+0x8e>
    129a:	11 23       	and	r17, r17
    129c:	41 f0       	breq	.+16     	; 0x12ae <__fpcmp_parts_f+0x9c>
    129e:	0a c0       	rjmp	.+20     	; 0x12b4 <__fpcmp_parts_f+0xa2>
    12a0:	82 17       	cp	r24, r18
    12a2:	93 07       	cpc	r25, r19
    12a4:	a4 07       	cpc	r26, r20
    12a6:	b5 07       	cpc	r27, r21
    12a8:	40 f4       	brcc	.+16     	; 0x12ba <__fpcmp_parts_f+0xa8>
    12aa:	11 23       	and	r17, r17
    12ac:	19 f0       	breq	.+6      	; 0x12b4 <__fpcmp_parts_f+0xa2>
    12ae:	61 e0       	ldi	r22, 0x01	; 1
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	05 c0       	rjmp	.+10     	; 0x12be <__fpcmp_parts_f+0xac>
    12b4:	6f ef       	ldi	r22, 0xFF	; 255
    12b6:	7f ef       	ldi	r23, 0xFF	; 255
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <__fpcmp_parts_f+0xac>
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	cb 01       	movw	r24, r22
    12c0:	1f 91       	pop	r17
    12c2:	08 95       	ret

000012c4 <__udivmodhi4>:
    12c4:	aa 1b       	sub	r26, r26
    12c6:	bb 1b       	sub	r27, r27
    12c8:	51 e1       	ldi	r21, 0x11	; 17
    12ca:	07 c0       	rjmp	.+14     	; 0x12da <__udivmodhi4_ep>

000012cc <__udivmodhi4_loop>:
    12cc:	aa 1f       	adc	r26, r26
    12ce:	bb 1f       	adc	r27, r27
    12d0:	a6 17       	cp	r26, r22
    12d2:	b7 07       	cpc	r27, r23
    12d4:	10 f0       	brcs	.+4      	; 0x12da <__udivmodhi4_ep>
    12d6:	a6 1b       	sub	r26, r22
    12d8:	b7 0b       	sbc	r27, r23

000012da <__udivmodhi4_ep>:
    12da:	88 1f       	adc	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	5a 95       	dec	r21
    12e0:	a9 f7       	brne	.-22     	; 0x12cc <__udivmodhi4_loop>
    12e2:	80 95       	com	r24
    12e4:	90 95       	com	r25
    12e6:	bc 01       	movw	r22, r24
    12e8:	cd 01       	movw	r24, r26
    12ea:	08 95       	ret

000012ec <__prologue_saves__>:
    12ec:	2f 92       	push	r2
    12ee:	3f 92       	push	r3
    12f0:	4f 92       	push	r4
    12f2:	5f 92       	push	r5
    12f4:	6f 92       	push	r6
    12f6:	7f 92       	push	r7
    12f8:	8f 92       	push	r8
    12fa:	9f 92       	push	r9
    12fc:	af 92       	push	r10
    12fe:	bf 92       	push	r11
    1300:	cf 92       	push	r12
    1302:	df 92       	push	r13
    1304:	ef 92       	push	r14
    1306:	ff 92       	push	r15
    1308:	0f 93       	push	r16
    130a:	1f 93       	push	r17
    130c:	cf 93       	push	r28
    130e:	df 93       	push	r29
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	ca 1b       	sub	r28, r26
    1316:	db 0b       	sbc	r29, r27
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	09 94       	ijmp

00001324 <__epilogue_restores__>:
    1324:	2a 88       	ldd	r2, Y+18	; 0x12
    1326:	39 88       	ldd	r3, Y+17	; 0x11
    1328:	48 88       	ldd	r4, Y+16	; 0x10
    132a:	5f 84       	ldd	r5, Y+15	; 0x0f
    132c:	6e 84       	ldd	r6, Y+14	; 0x0e
    132e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1330:	8c 84       	ldd	r8, Y+12	; 0x0c
    1332:	9b 84       	ldd	r9, Y+11	; 0x0b
    1334:	aa 84       	ldd	r10, Y+10	; 0x0a
    1336:	b9 84       	ldd	r11, Y+9	; 0x09
    1338:	c8 84       	ldd	r12, Y+8	; 0x08
    133a:	df 80       	ldd	r13, Y+7	; 0x07
    133c:	ee 80       	ldd	r14, Y+6	; 0x06
    133e:	fd 80       	ldd	r15, Y+5	; 0x05
    1340:	0c 81       	ldd	r16, Y+4	; 0x04
    1342:	1b 81       	ldd	r17, Y+3	; 0x03
    1344:	aa 81       	ldd	r26, Y+2	; 0x02
    1346:	b9 81       	ldd	r27, Y+1	; 0x01
    1348:	ce 0f       	add	r28, r30
    134a:	d1 1d       	adc	r29, r1
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	ed 01       	movw	r28, r26
    1358:	08 95       	ret

0000135a <_exit>:
    135a:	f8 94       	cli

0000135c <__stop_program>:
    135c:	ff cf       	rjmp	.-2      	; 0x135c <__stop_program>
